(* Lifting of a continous-time node into a discrete-time node *)
(*  zeluc -s main t149.zls
 *- ocamlfind ocamlc bigarray.cma -package sundialsml \
    sundials.cma zllib.cma -I ../../lib t149.ml main.ml *)

let hybrid f() =
  let rec der x = 1.0 init -1.0 reset up(x -. 0.5) -> -1.0
  and present (period(0.0|2.0)) -> do o = last o + 1 done
  and init o = 0 in
  (x, o)

let h = 0.5

let node main () =
  let rec
      (* integrate [f] *)
      { Node.time = actual_time; Node.status = status; Node.result = x,o } =
         present step -> Node.solve f 10.0 (expected_time, ())
         init
           { Node.time = 0.0; Node.status = Node.Error; Node.result = 0.0, 0 } 
  and
      (* ask for a new input every time [actual_time = expected_time] *)
      ok = (actual_time = expected_time)
   and
      expected_time =
          h -> if pre(ok) then pre(expected_time) +. h else pre(expected_time)
   and
      step = true fby ok in
   print_string "expected time = "; print_float expected_time;
   print_newline ();
   print_string "actual time = "; print_float actual_time;
   print_newline ();
   print_string "x = "; print_float x;
   print_newline ();
   print_string "o = "; print_int o;
   print_newline ()
    
