type t2 = int

let f0 x  = x + 1
    
let f11 x y z  = x + y + z

let k (m1, m2, m3) s = f1 (m1, m2, m, s)
    
let ff(x) = 1 + x

let fff(x) = ff(x+1)
    
let node ffff(x) =
  let rec o = pre o + 1 in
  o + x
    
let hybrid f (x) =
  let rec der m = 1.0 init 0.0 in
  let rec der k = 2.0 +. k init 3.0 in
  m +. x +. 1.0 +. k

let i1 j = k where rec
  match true with
  | true -> match true with
            | true -> do emit k = () done
	    | false -> do done
            end
  | false -> do done
  end

let hybrid g(x) =
  let rec der m = 1.0 +. 2.0 init 0.0 
  and der z = m init 1.0 and k = z and l = up(m) in
  m

let hybrid h(x, y) =
  let z = x+1 in
  let t = y+1 in
  let m = g(x) in
  z, t
    
let hybrid main () =
  let _ = f(3.0)
  and _ = g(4.0) in
  let _ = f(3.0)
  and _ = g(4.0) in
  let _ = f(3.0)
  and _ = g(4.0) in
  let _ = f(3.0)
  and _ = g(4.0) in
  ()

let main2 x = let z = x + 2 in z
