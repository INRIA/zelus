let node f n x = n -> pre(x) + 1

let node compose f g x = run f(run g(x+x))
   
let node higher f g x y = run (f g) (x+y+1)

let node f3 n x = f 1 (x+3)
    

let node f1(x) = 0 -> pre x + 1
let node f2(x) = x + 2

let node h g x = g(x+1) + g(x+2)

let node boucle n x = 
  local o
  do forall i in 0 .. n, x_i in x, o_i out o do
       o_i = f1(x_i) + i
     done in
  o

let static add(x, y) = x + y

let node main1(x) = f(1+2)(x)

let node main(x, t) =
  let r = (compose f1 f2)(x + 1) + f1(x+2) + f1(x+3)
      + (higher f3 f1) (1+4) (5+x) + (f (add(1, 2)))(x) in
  ((boucle(42 + 1))(t)).(2) + r + main1(x)

let node map(f)(n)(t) = t' where
  rec forall i in 0 .. (n-1), ti in t, ti' out t' do
	 ti' = run f ti
      done

let node g x = x + x

let node map_g(t) = map g (42+2) t
    
let f42 n t1 = t where rec
  forall i in 0 .. n, t_i in t1, t out t do
    t = t_i + 1 and x = 2
  initialize
    last x = 0
  done
	


let sum_array n (t1, t2) = t where
  forall i in 0 .. n, x in t1, y in t2, z out t do
      z = x + y
  done

let sum_array2 t = (sum_array (42+42))(t, t)

let node loop n () =
  local m, m_i
  do init m = 0 and m = m_i
  and forall i in 0 .. n
      do
        m_i = last m_i + 1
      initialize
        last m_i = last m + 1
      done in
  m

let node loop_42 () = loop 42 () + loop 43 ()

let node window n x =
  local t, m
  do forall i in 0 .. n, t_i out t do
       m = 0 fby (last m) and t_i = m
     initialize
       last m = x
     done in
  t

let scalar n (t1, t2) =
  local o
  do forall i in 0 .. n, x in t1, y in t2 do
       o = last o + x * y
     initialize
       last o = 0
     done
in o
    
let transpose n m (m1 : int[n+1][m+1]) = (m2) where rec
  forall i in 0 .. n, m2_i out m2 do
    forall j in 0 .. m, m1_j in m1, m2_i_j out m2_i do
      m2_i_j = m1_j.(i) done
    done
  
let sum_matrix n m (m1, m2) = (m3) where rec
    forall i in 0 .. n, m1_i in m1, m2_i in m2, m3_i out m3 do
      forall j in 0 .. m, m1_i_j in m1_i, m2_i_j in m2_i, m3_i_j out m3_i do
	m3_i_j = m1_i_j + m2_i_j
      done
    done

let init0 n (t) = (t') where rec
  forall i in 0 .. n, t_i in t, t_i' out t' do
    t_i' = t_i + i
  done

let matrix n m (m1, m2) = (m3) where rec
  forall j in 0 .. n, m2_j in m2, m3_j out m3 do
    (* m3_j = matrix_with_vector m1 m2_j *)
    forall i in 0 .. m, m1_i in m1, m3_j_i out m3_j do
      (* scalar product *)
      m3_j_i = (scalar m)(m1_i, m2_j)
    done
   done

