(* Dual numbers, used for automatic differentiation *)
(* Added by B. Caillaud <benoit.caillaud@inria.fr> *)

type dual = Dual.t

(* the core module. taken from Ocaml *)
(* pour debugger set arguments -nopervasives -i lib/pervasives.lsi *)

(* Every occurrence of type float has been replaced by type dual *) 

type 'a list = 'a Pervasives.list

val ( on ) : zero * bool -> zero
val orz : zero * zero -> zero
val ( = ) : 'a * 'a -> bool
val ( <> ) : 'a * 'a -> bool
val ( < ) : 'a * 'a -> bool
val ( > ) : 'a * 'a -> bool
val ( <= ) : 'a * 'a -> bool
val ( >= ) : 'a * 'a -> bool
val compare : 'a * 'a -> int
val min : 'a * 'a -> 'a
val max : 'a * 'a -> 'a
val ( == ) : 'a * 'a -> bool
val ( != ) : 'a * 'a -> bool
val not : bool -> bool
val ( && ) : bool * bool -> bool
val ( & ) : bool * bool -> bool
val ( || ) : bool * bool -> bool
val ( or ) : bool * bool -> bool
val ( ~- ) : int -> int
val succ : int -> int
val pred : int -> int
val ( + ) : int * int -> int
val ( - ) : int * int -> int
val ( * ) : int * int -> int
val ( / ) : int * int -> int
val ( mod ) : int * int -> int
val abs : int -> int
val max_int : int 
val min_int : int 
val ( land ) : int * int -> int
val ( lor ) : int * int -> int
val ( lxor ) : int * int -> int
val lnot : int -> int
val ( lsl ) : int * int -> int
val ( lsr ) : int * int -> int
val ( asr ) : int * int -> int
val ( ~-. ) : dual -> dual
val ( +. ) : dual * dual -> dual
val ( -. ) : dual * dual -> dual
val ( *. ) : dual * dual -> dual
val ( /. ) : dual * dual -> dual
val ( ** ) : dual * dual -> dual
val sqrt : dual -> dual
val exp : dual -> dual 
val log : dual -> dual 
val log10 : dual -> dual
val cos : dual -> dual
val sin : dual -> dual
val tan : dual -> dual
val acos : dual -> dual
val asin : dual -> dual
val atan : dual -> dual
val atan2 : dual * dual -> dual
val cosh : dual -> dual
val sinh : dual -> dual
val tanh : dual -> dual
val ceil : dual -> dual
val floor : dual -> dual
val abs_float : dual -> dual
val mod_float : dual * dual -> dual
val frexp : dual -> dual * int
val ldexp : dual * int -> dual
val modf : dual -> dual * dual
val float : int -> dual
val float_of_int : int -> dual
val truncate : dual -> int
val int_of_float : dual -> int
val infinity : dual
val neg_infinity : dual
val nan : dual
val max_float : dual
val min_float : dual
val epsilon_float : dual
type fpclass = Pervasives.fpclass
val classify_float : dual -> fpclass
val ( ^ ) : string * string -> string
val int_of_char : char -> int
val char_of_int : int -> char
val ignore : 'a -> unit
val string_of_bool : bool -> string
val bool_of_string : string -> bool
val string_of_int : int -> string
val int_of_string : string -> int
val string_of_float : dual -> string
val float_of_string : string -> dual
val fst : 'a * 'b -> 'a
val snd : 'a * 'b -> 'b
type in_channel = Pervasives.in_channel
type out_channel = Pervasives.out_channel
val stdin : in_channel 
val stdout : out_channel 
val stderr : out_channel 
val unsafe print_char : char -> unit
val unsafe print_string : string -> unit
val unsafe print_int : int -> unit
val unsafe print_float : dual -> unit
val unsafe print_endline : string -> unit
val unsafe print_newline : unit -> unit
val unsafe prerr_char : char -> unit
val unsafe prerr_string : string -> unit
val unsafe prerr_int : int -> unit
val unsafe prerr_float : dual -> unit
val unsafe prerr_endline : string -> unit
val unsafe prerr_newline : unit -> unit
val unsafe read_line : unit -> string
val unsafe read_int : unit -> int
val unsafe read_float : unit -> dual
type open_flag = Pervasives.open_flag
val unsafe open_out : string -> out_channel
val unsafe open_out_bin : string -> out_channel
val unsafe open_out_gen : open_flag list * int * string -> out_channel
val unsafe flush : out_channel -> unit
val unsafe flush_all : unit -> unit
val unsafe output_char : out_channel * char -> unit
val unsafe output_string : out_channel * string -> unit
val unsafe output : out_channel * string * int * int -> unit
val unsafe output_byte : out_channel * int -> unit
val unsafe output_binary_int : out_channel * int -> unit
val unsafe output_value : out_channel * 'a -> unit
val unsafe seek_out : out_channel * int -> unit
val unsafe pos_out : out_channel -> int
val unsafe out_channel_length : out_channel -> int
val unsafe close_out : out_channel -> unit
val unsafe close_out_noerr : out_channel -> unit
val unsafe set_binary_mode_out : out_channel * bool -> unit
val unsafe open_in : string -> in_channel
val unsafe open_in_bin : string -> in_channel
val unsafe open_in_gen : open_flag list * int * string -> in_channel
val unsafe input_char : in_channel -> char
val unsafe input_line : in_channel -> string
val unsafe input : in_channel * string * int * int -> int
val unsafe really_input : in_channel * string * int * int -> unit
val unsafe input_byte : in_channel -> int
val unsafe input_binary_int : in_channel -> int
val unsafe input_value : in_channel -> 'a
val unsafe seek_in : in_channel * int -> unit
val unsafe pos_in : in_channel -> int
val unsafe in_channel_length : in_channel -> int
val unsafe close_in : in_channel -> unit
val unsafe close_in_noerr : in_channel -> unit
val unsafe set_binary_mode_in : in_channel * bool -> unit
