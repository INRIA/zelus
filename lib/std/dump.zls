open Basics

(* See the documentation in scope.zls.

   Rather than display a graphical window. This module dumps the data to
   a file using the window title as a name and the extension ".out". *)

let piecewise = ()
let square    = ()
let linear    = ()
let points x  = ()

let fun getName (n, _, _) = n
let fun getValue (_, _, v) = v

let node scopen (yl, yu, l) =
  let init names = List.map getName l in
  (names, List.map getValue l)

let node scope (yl, yu, (n1, t1, v1)) =
  let init names = [n1] in
  (names, [v1])

let node scope2 (yl, yu, (n1, t1, v1), (n2, t2, v2)) =
  let init names = [n1; n2] in
  (names, [v1; v2])

let node scope3 (yl, yu,
                 (n1, t1, v1), (n2, t2, v2), (n3, t3, v3)) =
  let init names = [n1; n2; n3] in
  (names, [v1; v2; v3])

let node scope4 (yl, yu,
                 (n1, t1, v1), (n2, t2, v2), (n3, t3, v3), (n4, t4, v4)) =
  let init names = [n1; n2; n3; n4] in
  (names, [v1; v2; v3; v4])

let node windown (title, imaxt, t, l) =
    output_floats f (t :: v) where
  rec init f = open_out (title ^ ".out")
  and init x = output_quoted_strings f ("t" :: n)
  and init n = List.fold_left List.append [] (fst (List.split l))
  and init v = List.fold_left List.append [] (snd (List.split l))

let node window (title, imaxt, t, (n1, v1)) = output_floats f (t :: v1)
  where
  rec init f = open_out (title ^ ".out")
  and init x = output_quoted_strings f ("t" :: n1)

let node window2 (title, imaxt, t, (n1, v1), (n2, v2)) =
    output_floats f (t :: List.append v1 v2) where
  rec init f = open_out (title ^ ".out")
  and init x = output_quoted_strings f ("t" :: List.append n1 n2)

let node window3 (title, imaxt, t, (n1, v1), (n2, v2), (n3, v3)) =
    output_floats f (t :: List.append v1 (List.append v2 v3))
  where
  rec init f = open_out (title ^ ".out")
  and init x = output_quoted_strings
                 f ("t" :: List.append n1 (List.append n2 n3))

let node window4 (title, imaxt, t, (n1, v1), (n2, v2), (n3, v3), (n4, v4)) =
    output_floats f (t :: List.append v1 (List.append v2 (List.append v3 v4)))
  where
  rec init f = open_out (title ^ ".out")
  and init x = output_quoted_strings
                 f ("t" :: List.append n1 (List.append n2 (List.append n3 n4)))

let node window5 (title, imaxt, t,
                  (n1, v1), (n2, v2), (n3, v3), (n4, v4), (n5, v5)) =
  output_floats f
    (t :: List.append v1 (List.append v2
			    (List.append v3 (List.append v4 v5))))
  where
  rec f = open_out (title ^ ".out")
  and x = output_quoted_strings f
      ("t" :: List.append n1
	       (List.append n2 (List.append n3 (List.append n4 n5))))
