type t

val zero : t
(** The 32-bit integer 0. *)

val one : t
(** The 32-bit integer 1. *)

val minus_one : t
(** The 32-bit integer -1. *)

val neg : t -> t
(** Unary negation. *)

val add : t -> t -> t
(** Addition. *)

val sub : t -> t -> t
(** Subtraction. *)

val mul : t -> t -> t
(** Multiplication. *)

val div : t -> t -> t
(** Integer division.  Raise [Division_by_zero] if the second
   argument is zero.  This division rounds the real quotient of
   its arguments towards zero, as specified for {!Pervasives.(/)}. *)

val rem : t -> t -> t
(** Integer remainder.  If [y] is not zero, the result
   of [Int32.rem x y] satisfies the following property:
   [x = Int32.add (Int32.mul (Int32.div x y) y) (Int32.rem x y)].
   If [y = 0], [Int32.rem x y] raises [Division_by_zero]. *)

val succ : t -> t
(** Successor.  [Int32.succ x] is [Int32.add x Int32.one]. *)

val pred : t -> t
(** Predecessor.  [Int32.pred x] is [Int32.sub x Int32.one]. *)

val abs : t -> t
(** Return the absolute value of its argument. *)

val max_int : t
(** The greatest representable 32-bit integer, 2{^31} - 1. *)

val min_int : t
(** The smallest representable 32-bit integer, -2{^31}. *)


val logand : t -> t -> t
(** Bitwise logical and. *)

val logor : t -> t -> t
(** Bitwise logical or. *)

val logxor : t -> t -> t
(** Bitwise logical exclusive or. *)

val lognot : t -> t
(** Bitwise logical negation *)

val shift_left : t -> int -> t
(** [Int32.shift_left x y] shifts [x] to the left by [y] bits.
   The result is unspecified if [y < 0] or [y >= 32]. *)

val shift_right : t -> int -> t
(** [Int32.shift_right x y] shifts [x] to the right by [y] bits.
   This is an arithmetic shift: the sign bit of [x] is replicated
   and inserted in the vacated bits.
   The result is unspecified if [y < 0] or [y >= 32]. *)

val shift_right_logical : t -> int -> t
(** [Int32.shift_right_logical x y] shifts [x] to the right by [y] bits.
   This is a logical shift: zeroes are inserted in the vacated bits
   regardless of the sign of [x].
   The result is unspecified if [y < 0] or [y >= 32]. *)

val of_int : int -> t
(** Convert the given integer (type [int]) to a 32-bit integer
    (type [t]). *)

val to_int : t -> int
(** Convert the given 32-bit integer (type [t]) to an
   integer (type [int]).  On 32-bit platforms, the 32-bit integer
   is taken modulo 2{^31}, i.e. the high-order bit is lost
   during the conversion.  On 64-bit platforms, the conversion
   is exact. *)

val of_float : float -> t
(** Convert the given floating-point number to a 32-bit integer,
   discarding the fractional part (truncate towards 0).
   The result of the conversion is undefined if, after truncation,
   the number is outside the range \[{!Int32.min_int}, {!Int32.max_int}\]. *)

val to_float : t -> float
(** Convert the given 32-bit integer to a floating-point number. *)

val of_string : string -> t
(** Convert the given string to a 32-bit integer.
   The string is read in decimal (by default) or in hexadecimal,
   octal or binary if the string begins with [0x], [0o] or [0b]
   respectively.
   Raise [Failure "int_of_string"] if the given string is not
   a valid representation of an integer, or if the integer represented
   exceeds the range of integers representable in type [t]. *)

val to_string : t -> string
(** Return the string representation of its argument, in signed decimal. *)

val bits_of_float : float -> t
(** Return the internal representation of the given float according
   to the IEEE 754 floating-point ``single format'' bit layout.
   Bit 31 of the result represents the sign of the float;
   bits 30 to 23 represent the (biased) exponent; bits 22 to 0
   represent the mantissa. *)

val float_of_bits : t -> float
(** Return the floating-point number whose internal representation,
   according to the IEEE 754 floating-point ``single format'' bit layout,
   is the given [t]. *)

val compare: t * t -> int
(** The comparison function for 32-bit integers, with the same specification as
    {!Pervasives.compare}.  Along with the type [t], this function [compare]
    allows the module [Int32] to be passed as argument to the functors
    {!Set.Make} and {!Map.Make}. *)

(**/**)

(** {6 Deprecated functions} *)

val format : string -> t -> string
(** [Int32.format fmt n] return the string representation of the
   32-bit integer [n] in the format specified by [fmt].
   [fmt] is a [Printf]-style format consisting of exactly
   one [%d], [%i], [%u], [%x], [%X] or [%o] conversion specification.
   This function is deprecated; use {!Printf.sprintf} with a [%lx] format
   instead. *)
