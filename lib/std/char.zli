val code : char -> int
(** Return the ASCII code of the argument. *)

val chr : int -> char
(** Return the character with the given ASCII code.
   Raise [Invalid_argument "Char.chr"] if the argument is
   outside the range 0--255. *)

val escaped : char -> string
(** Return a string representing the given character,
   with special characters escaped following the lexical conventions
   of Objective Caml. *)

val lowercase : char -> char
(** Convert the given character to its equivalent lowercase character. *)

val uppercase : char -> char
(** Convert the given character to its equivalent uppercase character. *)

val lowercase_ascii : char -> char
(** Convert the given character to its equivalent lowercase character, *)
(* using the US-ASCII character set. *)

val uppercase_ascii : char -> char
(** Convert the given character to its equivalent uppercase character, *)
(* using the US-ASCII character set. *)

type t = char 
(** An alias for the type of characters. *)

val compare: char -> char -> int
(** The comparison function for characters, with the same specification as
    {!Pervasives.compare}.  Along with the type [t], this function [compare]
    allows the module [Char] to be passed as argument to the functors
    {!Set.Make} and {!Map.Make}. *)

val equal : t -> t -> bool
(** The equal function for chars. *)
(**/**)
