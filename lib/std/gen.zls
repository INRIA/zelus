(* TRACE COMBINATORS *)

(* Followed by:
   while e(res) is true, res = T1 with initial value prev and when e becomes false
   (at t = t0), res = T2 with initial value res(t0-)
*)
node t_fby(t1, e, t2)(tstep, prev) = res where
  rec init last_val = prev
  and automaton
  | NotSeenE -> do res = run t1 (tstep, last last_val)
                and ev = run e (tstep, res)
                until ev() then
                do last_val = res in SeenE
  | SeenE    -> do res = run t2 (tstep, last last_val) done

(* Loop:
   loop(T, e)(prev) = fby(T, e, loop(T, e))(prev)
*)
node t_loop(t, e)(tstep, prev) = res where
  rec init last_val = prev
  and ev = run e (tstep, res)
  and automaton
  | SeenE -> do res = run t (tstep, last last_val)
             until ev() then
             do last_val = res in SeenE

(* Switch:
   switch(T1, e, T2)(prev) = T1 with initial value prev if e
   switch(T1, e, T2)(prev) = T2 with initial value prev if not e
*)
node t_switch(e, t1, t2)(tstep, prev) =
    let res1 = run t1 (tstep, prev) in
    let res2 = run t2 (tstep, prev) in

    let rec cond = run e (tstep, res)
    and res = if cond then res1 else res2 in

    res

(* Random switch
   switch(p)(T1, T2) = T1 with probability p or T2 with probability (1-p)
*)
node t_rand_switch(p)(t1, t2)(tstep, prev) =
  let res1 = run t1 (tstep, prev) in
  let res2 = run t2 (tstep, prev) in

  let init b = Random.float(1.) < p in

  if b then res1 else res2

(* TRACE GENERATION *)

let pick_float(i1, i2) = Random.float(i2 -. i1) +. i1

(* constant trace with initial value between i1 and i2 *)
node const(i1, i2)(_, _) = res where
  init res = pick_float(i1, i2)

(* constant signal equal to its initial value, used to flatten a trace :
    t_fby (linear (0., 1.), flat) (t < 1., (tstep, 0.)) is a continuous trace
    that is linear during the first second (with slope between 0 and 1 and
    initial value 0) and then constant from that point on
*)
node flat(_, prev) = res where
  init res = prev

(* affine signal with a slope between i1 and i2 and an initial value of prev *)
node linear(i1, i2)(tstep, prev) = res where
  rec init slope = pick_float(i1, i2)
  and res = prev fby (res +. slope *. tstep)

(* piecewise affine signal with slope between -slope_mag and slope_mag and
   initial value prev. It almost never gets out of [i1, i2] *)
node bounded_affine(i1, i2)(slope_mag)(tstep, prev) = res where
  rec reset slope =
    (if res > i2 then pick_float(-.slope_mag, 0.)
     else if res < i1 then pick_float(0., slope_mag)
     else pick_float(-.slope_mag, slope_mag))
    fby slope
    every (res > i2 || res < i1)
  and res = prev fby (res +. slope *. tstep)

(* EVENT FUNCTIONS *)

(* node no_evt(_) = e where present up(1.) -> do emit e = () done *)

(* clock t0 tstep = true every instant n such as :
   exists k, (n-1) * tstep < (k *. t0)
        and  n * tstep >= k *. t0

    ie true at most once every t0 instant on a clock with speed tstep
*)
node clock(t0)(tstep, _) = e where
    automaton
        | I ->
            let rec t = 0. fby (t +. tstep) in
            do until (t >= t0) then do emit e = () in I

node horizon(h)(tstep, _) = e where
  rec t = 0. fby (t +. tstep)
  and ev = (t > h) && (true -> (pre t < h))
  and present ev -> do emit e = () done

(*
node rand_horizon(h1, h2)(_) = e where
  rec der t = 1. init 0.
  and init h = pick_float(h1, h2)
  and present up(t -. h) -> do emit e = () done

node sig_of_zero(z) = e where
  present z -> do emit e = () done

node val_gt_0(x) = e where
  present up(x) -> do emit e = () done
node val_gt(f)(x) = val_gt_0(x -. f)
node val_lt(f)(x) = val_gt_0(f -. x)

node e_and(e1, e2)(f1, f2) = e where
  rec e1_listener = (run e1 f1)
  and e2_listener = (run e2 f2)
  and init got_1 = false and init got_2 = false and init is_done = false
  and present
  | e1_listener() on (got_2 && (not (is_done)))
  | e2_listener() on (got_1 && (not (is_done))) ->
    do emit e = () and next is_done = true done
  | e1_listener() on (not (got_2)) -> do next got_1 = true done
  | e2_listener() on (not (got_1)) -> do next got_2 = true done

node e_or(e1, e2)(f1, f2) = e where
  rec e1_listener = (run e1 f1)
  and e2_listener = (run e2 f2)
  and init is_done = false
  and present
  | e1_listener() on (not (last is_done))
  | e2_listener() on (not (last is_done)) ->
  do emit e = () and is_done = true done *)
