(*
    Example 10.2 (A basic SOAS)
    from "Adaptive Control", 2e, Åström and Wittenmark, 2008

 *)

(* ** library functions ** *)

(* linear first-order single-input single-output system *)
let hybrid siso_1o (a, b, c, d, u) = y where
  rec der x1 = a *. x1  +.  b *. u init 0.0
  and y = c *. x1  +.  d *. u

(* linear second-order single-input single-output system *)
let hybrid siso_2o ((a11, a12, a21, a22), (b1, b2), (c1, c2), d, u) = y where
  rec der x1 = a11 *. x1  +.  a12 *. x2  +.  b1 *. u init 0.0
  and der x2 = a21 *. x1  +.  a22 *. x2  +.  b2 *. u init 0.0
  and y = c1 *. x1  +.  c2 *. x2  +.  d *. u

(* linear third-order single-input single-output system *)
let hybrid siso_3o ((a11, a12, a13, a21, a22, a23, a31, a32, a33),
                    (b1, b2, b3), (c1, c2, c3), d, u) = y where
  rec der x1 = a11 *. x1  +.  a12 *. x2  +.  a13 *. x3  +.  b1 *. u init 0.0
  and der x2 = a21 *. x1  +.  a22 *. x2  +.  a23 *. x3  +.  b2 *. u init 0.0
  and der x3 = a31 *. x1  +.  a32 *. x2  +.  a33 *. x3  +.  b3 *. u init 0.0
  and y = c1 *. x1  +.  c2 *. x2  +.  c3 *. x3  +.  d *. u

(* ideal relay model *)
let hybrid relay (d, e) = u where
  u = present up(e) | up(-. e) | (disc(e)) | (init)
        -> if e >= 0.0 then d else -. d init 0.0

(* ** model ** *)

(* feed-forward reference model

   damping factor z    = 0.7;
   natural frequency w = 1.0 rad/sec;

   The state-space realization can be calculated in Matlab:
      [A, B, C, D] = ord2(1.0, 0.7)

   Or in Scilab:
      s = %s; wn = 1.0; zeta = 0.7;
      tf2ss(syslin('c', wn^2, s^2 + 2*zeta*wn*s + wn^2))
*)
let hybrid reference u =
  siso_2o ((0.0, 1.0, -1.0, -1.4), (0.0, 1.0), (1.0, 0.0), 0.0, u)

let hybrid command () = u where
  automaton
  | S0 -> do u = 1.0  until (period (17.5 | 17.5)) then S1
  | S1 -> do u = -1.0 until (period (35.0 | 35.0)) then S2
  | S2 -> do u = 1.0 done

(* compensation network
                       s + 5
     G_f(s) = 1.2 * ( -------- )
                       s + 15

   The state-space realization can be calculated in Matlab:
     [a, b, c, d] = ss(1.2 * tf([1 5], [1 15]))

   or in Scilab:
     s = poly(0, 's')
     [a, b, c, d] = abcd(tf2ss(1.2 * (s + 5) / (s + 15)))

*)
let hybrid g_f u = siso_1o (-15.0, 4.0, -3.0, 1.2, u)

(* up-logic gain changer *)
(* The initial state should be D1 when |e| > e_l *)
let hybrid gain_changer (d1, d2, e_l, e) = d where
  automaton
  | D2 -> local t in
          do
            der t = 1.0 init 0.0
            and d = d2 +. (d1 -. d2) *. exp(-.t)
          until up(abs_float e -. e_l) then D1
  | D1 -> do d = d1 until up(e_l -. abs_float e) then D2

(* The process:

      G(s) =       K * alpha
              -------------------
              s(s + 1)(s + alpha)

   "The nominal values of the parameters are K = 3, ..., and alpha = 20."

   The state-space realization can be calculated in Matlab:
     sys1 = tf(60, [1 21 20 0])
     [a, b, c, d] = ss(sys1)

   "The process gain is suddenly increased by a factor of 5 at t = 25."
     sys2 = 5 * sys1
     [a, b, c, d] = ss(sys2)

   And similarly in Scilab:
     s=%s
     sys1 = 60 / (s * (s + 1) * (s + 20))
     [a, b, c, d] = abcd(sys1)

     sys2 = 5 * sys1
     [a, b, c, d] = abcd(sys2)
*)
let hybrid process u = y where
  rec automaton
      | G5  -> do b1 = 4.0 and c3 = 3.750 until (period (25.0 | 25.0)) then G15
      | G15 -> do b1 = 8.0 and c3 = 9.375 done
  and y = siso_3o ((-21.0, -5.0, 0.0,
                      4.0,  0.0, 0.0,
                      0.0,  1.0, 0.0),
                   (b1, 0.0, 0.0), (0.0, 0.0, c3), 0.0, u)

open Scope (* Dump *)

let hybrid plot (title, y, y_m, u, e) = () where
  _ = present (period (0.08)) -> (
    let
    rec s1 = scope2 (-1.5, 1.5, ("y_m", linear, y_m),
                                ("y",   linear, y))
    and s2 = scope (-1.0, 1.0, ("u", square, u))
    and s3 = scope (-1.0, 1.3, ("e", linear, e))
    and t = 0.0 fby t +. 0.08
    in window3 (title, 50.0, t, s1, s2, s3))
