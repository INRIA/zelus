open Misc

(***  The embedded application ***)
(* [M1] ------> [M2] -----> [M1] *)

let node machine1 (i) = n where
  rec n = 0 -> (i+2 + pr)
  and pr = debug "MACHINE 1"

let node machine2 (i) = m where
  rec m = 1 -> (i+2 + pr)
  and pr = debug "MACHINE 2"


(*** Modeling Quasi-periodic Architecturea ***)

(** Bounds of Definition 1 **)
let t_min = 3.0
let t_max = 3.5
let tau_min = 0.11
let tau_max = 0.53


(** Quasi-periodic clocks **)
let hybrid metro (t_min, t_max) = c where
  rec der t = 1.0 init -. arbitrary (t_min, t_max)
      reset z -> -. arbitrary (t_min, t_max)
  and z = up(last t)
  and present z -> do emit c = () done


(** Delayed clock. Model transmission delay **)
let hybrid delay(c, tau_min, tau_max) = dc where
  rec der t = 1.0 init 0.0
        reset c() ->  -. arbitrary (tau_min, tau_max)
  and present up(t) -> do emit dc = () done


(*** General Framework ***)

(** Memory. Maintain the last received value on a signal *)
let node mem (i, mi) = o where
  rec init m = mi
  and present i(v) -> do m = v done
  and o = last m


(** Modeling nodes **)
(* Require instanciations of nodes machine and ltta_controller *)
(*
let node ltta_node(i, default) = o where
  rec m = mem(om, default)
  and (o, im) = ltta_controller(i, m)
  and present im(v) -> do emit om = machine(v) done
*)

(** Modeling links **)
let node channel (dc, i) = o where
  rec init q = empty()
  and trans = not (is_empty (last q))
  and present
      | dc() on trans & i(v)  ->
          do emit o = front (last q)
          and q = enqueue(dequeue(last q), v) done
      | dc() on trans ->
          do emit o = front (last q)
          and q = dequeue (last q) done
      | i(v) ->
          do q = enqueue (last q, v) done


let node link(dc, i, mi) = o where
  rec s = channel(dc, i)
  and o = mem(i, mi)


(** Freshness of value **)
type 'a msg = {data : 'a; alt : bool}
let data v = v.data

let node alternate i = o where
  rec present i(v) -> local flag in
        do flag = true -> not (pre flag)
        and emit o = {data = v; alt = flag} done

let node fresh (i, r, st) = o where
  rec init m = st
  and present r(_) -> do m = i.alt done
  and o = (i.alt <> last m)

(** LTTA links **)
let node ltta_link (dc, i, mi) = o where
  rec s = channel (dc, i)
  and sa = alternate s
  and o = mem (sa, {data = mi; alt = false})


(*** The LTTA Protocols ***)

(** Back-Pressure LTTA **)
let node bp_controller (i, ra, om, mi) = (o, a, im, pr) where
  rec m = mem(om, mi)
  and init pr = 0
  and automaton
      | Wait ->
          do (* skip *)
          unless all_inputs_fresh then
            do pr = debug "STEP"
            and emit im = data(i)+pr and emit a in Ready
      | Ready ->
          do (* skip *)
          unless all_acks_fresh then
            do pr = debug "PUBLISH"
            and emit o = m+pr in Wait

  and all_inputs_fresh = fresh(i, im, true)
  and all_acks_fresh = fresh(ra, o, false)


(** A small example **)
(* BP nodes *)
let node m1(i,ra) = o,a where
  rec (o, a, im, pr) = bp_controller(i, ra, om, -1)
  and present im(v) -> do emit om = machine1(v) done

let node m2(i,ra) = o,a where
  rec (o, a, im, pr) = bp_controller(i, ra, om, -1)
  and present im(v) -> do emit om = machine2(v) done


(** Pluging two nodes with links to form an example **)

(* Note the activations of nodes on clock c1 and c2, *)
(* and the links on their delayed versions dc1 and dc2. *)
(* The output if the content of the links at each step. *)
let node example_bp (c1, dc1, c2, dc2) = (o1,o2) where
  rec present c1() -> do n,an = m1(l2,l2a) done
  and present c2() -> do m,am = m2(l1,l1a) done
  and l1 = ltta_link(dc1, n, -1)
  and l1a = ltta_link(dc1, an, ())
  and l2 = ltta_link(dc2, m, -1)
  and l2a = ltta_link(dc2, am, ())
  and o1 = l1.data
  and o2 = l2.data



(** Time-Based LTTA **)
(* Constants of thm 6 *)
let p =
  int_of_float (
  floor ((2. *. tau_max +. t_max) /.
        t_min) +. 1.)

let q =
  int_of_float (
  floor ((tau_max  +. (1. +. float (p)) *. t_max) /.
         t_min -. float (p)) +. 1.)

let node tb_controller (i, om, mi) = (o, im, pr) where
  rec init n = 1
  and init pr = 0
  and m = mem(om,mi)
  and automaton
      | Wait ->
          do n = p -> (last n - 1)
          until (n = 1) then
            do pr = debug "STEP"
            and emit im = data(i)+pr in Ready
      | Ready ->
          do n = q -> (last n - 1)
          until ((n = 1) or preempted) then
            do pr = debug "PUBLISH"
            and emit o = m+pr in Wait

 and preempted = fresh(i, im, false)

(** A small example **)
(** TB nodes **)
let node n1(i) = o where
  rec (o, im, pr) = tb_controller(i, om, -1)
  and present im(v) -> do emit om = machine1(v) done

let node n2(i) = o where
  rec (o, im, pr) = tb_controller(i, om, -1)
  and present im(v) -> do emit om = machine2(v) done


(** Pluging two nodes with links to form an example **)
let node example_tb (c1, dc1, c2, dc2) = (o1,o2) where
  rec present c1() -> do n = n1(l2) done
  and present c2() -> do m = n2(l1) done
  and l1 = ltta_link(dc1, n, -1)
  and l2 = ltta_link(dc2, m, -1)
  and o1 = l1.data
  and o2 = l2.data


(*** Optimizations ***)

(** Modeling buffer links **)
let node buffer (i, r) = o where
  rec init pr = 0
  and init q = empty()
  and not_empty = not (is_empty (last q))
  and present
      | r(_) on not_empty & i(v)  ->
          do q = enqueue(dequeue(last q), v) done
      | r(_) on not_empty ->
          do q = dequeue (last q) done
      | i(v) ->
          do q = enqueue (last q, v) done

  (* the field alt is now set to false when the buffer is empty *)
  and o = if not_empty
          then {data=front (last q); alt=true}
          else {data= (-1); alt=false}

let node buff_link (dc, i, r) = o where
  rec s = channel (dc, i)
  and o = buffer (s, r)

(** Round-Based LTTA  **)
let node rb_controller (i, om) = (o, im) where
  rec init pr = 0
  and automaton
      | Wait ->
          do (* skip *)
          unless all_input_fresh then
            do pr = debug "STEP/PUBLISH"
            and emit im = data(i)+pr in Wait

  and all_input_fresh = true -> i.alt
  and o = om

(** A small example **)
(** RB nodes **)
let node p1(i) = o, im where
  rec (o, im) = rb_controller(i, om)
  and present im(v) -> do emit om = machine1(v) done

let node p2(i) = o, im where
  rec (o, im) = rb_controller(i, om)
  and present im(v) -> do emit om = machine2(v) done


let node example_rb (c1, dc1, c2, dc2) = (o1,o2) where
  rec present c1() -> do n, r1 = p1(l2) done
  and present c2() -> do m, r2 = p2(l1) done
  and l1 = buff_link(dc1, n, r2)
  and l2 = buff_link(dc2, m, r1)
  and o1 = l1.data
  and o2 = l2.data


(*** Simulation ***)
(* Link with the timing constraints of the application *)
let hybrid main () =

  (* Architecture constraints *)
  let c1 = metro(t_min, t_max) in
  let dc1 = delay(c1, tau_min, tau_max) in
  let c2 = metro(t_min, t_max) in
  let dc2 = delay(c2, tau_min, tau_max) in

  (* Global clock *)
  let g =  present c1() | dc1() | c2() | dc2() -> () in

  present g() ->
    (* Run an example (choose the protocol) *)
    let (o1,o2) = example_tb(c1, dc1, c2, dc2) in
    (* let (o1,o2) = example_bp(c1, dc1, c2, dc2) in *)
    (* let (o1,o2) = example_rb(c1, dc1, c2, dc2) in *)
    print (o1, o2)
  else ()


(*** Appendix ***)

(** Complete Modeling of the Transmission Delay **)
let hybrid delay2(c, tau_min, tau_max, eps) = dc where
  rec init q = empty()
  and init t = 0.0
  and init trans = false
  and present
      | c() & up(last t) ->
          local tau, d in
          do if is_empty(last q) then do t = -. tau done
             else do q = enqueue(dequeue(last q), d)
                  and t = -. front(last q) done
          and tau = arbitrary(tau_min, tau_max)
          and d = max eps (tau -. sum(last q) +. last t)
          and emit dc = () done
      | up(last t) ->
          do if is_empty(last q) then do trans = false done
             else do t = -. front(last q) and q = dequeue(last q) done
          and emit dc = () done
      | c() ->
          local tau, d in
          do if last trans then do  q = enqueue(last q, max d eps) done
              else do t = -. tau and trans = true done
          and tau = arbitrary(tau_min, tau_max)
          and d = tau -. sum(last q) +. last t done
   else do der t = 1.0 done
