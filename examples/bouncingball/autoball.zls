(** The same as the bouncing ball, this time with a mean *)
(* to avoid crossing the ground *)

(* [ground x] returns the position in [y] *)
let ground x = World.ground(x)
let ground_abs x = World.ground_abs(x)

let x_0 = 0.0
let y_0 = 10.0
let x_v = 0.45
let eps = 0.01

(* The bouncing ball with two modes. *)
hybrid ball(x_0, y_0) = (x, y, y_start) where
  rec init y_start = y_0 
  and der x = x' init x_0
  and init x' = x_v
  and 
  automaton
  | Bouncing ->
      (* the ball is falling with a possible bound. *)
      local z, y_v in
      do
        (y, y_v, z) = Ball.ball(x, y_start)
      until z on (y_v < eps) then Sliding(ground_abs x, ground(x))
  | Sliding(x0, y0) ->
      (* the ball slides, i.e., the derivative for y is 0 *)
      do 
        y = y0
      and
          automaton
	  | Slide -> do der x' = -0.1 until up(-0.01 -. x') then Stop
	  | Stop -> do x' = 0.0 done
	  end
      until up(x -. x0) then do y_start = y in Bouncing
  end

(* Main entry point *)
let hybrid main () =
  let (x, y, y_start) = ball(x_0, y_0) in
  present (period (0.04)) -> Showball.show (x fby x) (y fby y) x y;
  ()

