(* How to use Input *)

open Input
open Scope

let discrete make_window(title, (xrange, x_init), (yrange, y_init), b_init) = open_window (title, make_int "x" (0,11) 2)

let discrete get_inputs (w) = (x, y, s, b) where
      x = get_int  (w, "x")
  and y = get_float(w, "y")
  and s = get_sig  (w, "s")
  and b = get_bool (w, "b")

let node plot(t,x,y,s,b) =
  (* show values *)
  let sc = scope4(0., 100., ("x", square, float_of_int x),
                            ("y", square, y),
                            ("s", square, present s() -> 80. else 60.),
                            ("b", square, if b then 110. else 90.)) in
  window ("Test", 100., t, sc)

(* DISCRETE TIME *)

let node discr () =
  let rec t = 0. -> pre t +. 1. in

  (* define a window *)
  let rec init win_desc =
     frame "Main" (
       vbox [ hbox [ make_int "x" (0,11) 2; make_float "y" (0.,68.) 50. ];
              make_sig "s";
              make_bool "b" true ] )
  (* create and open the window *)
  and init w = open_window("Inputs", win_desc)
  (* by default the size of the window is the smallest size possible *)
  and init tmp = resize_window(w, 500, 100)
  (* get inputs *)
  and (x,y,s,b) = get_inputs w in

  (* show values *)
  plot(t,x,y,s,b)

(* CONTINUOUS TIME *)

let hybrid cont () =
  let der t = 1. init 0. in

  let xinit = 2   and xrange = (0 , 20 ) in
  let yinit = 36. and yrange = (30., 50.) in
  let binit = true in

  (* define a window *)
  let rec init win_desc =
     frame "Main" (
       vbox [ hbox [ make_int "x" (0,11) 2; make_float "y" (0.,68.) 50. ];
              make_sig "s";
              make_bool "b" true ] )
  (* create and open the window *)
  and init w = open_window("Inputs", win_desc)
  (* by default the size of the window is the smallest size possible *)
  and init tmp = resize_window(w, 500, 100) in

  let
  rec init x = xinit
  and init y = yinit
  and init b = binit

  (* read variables (every .. s) *)
  and present (period(0.1)) -> do (x,y,s,b) = get_inputs w done in

  present (period(0.1)) -> plot(t,x,y,s,b) else ()

(* let node main () = discr () *)
let hybrid main () = cont ()
