
open Fuelc_engine
open Fuelc_subsys
open Fuelc_common
open Library

(* Test: feed the engine model with values logged from Simulink *)
let hybrid testengineonly () =
  let rec throttle_signal = zigzag (4.0, 5.0) +. 15.0
  and (o2_out, map, air_fuel_ratio) =
    engine_gas_dynamics (300.0, throttle_signal, fuel_rate)
  and init fuel_rate = 0.0
  and present (init) | (period (0.0 | 0.001)) ->
    do fuel_rate = read_floats "fuel.in" done
  and der t = 1.0 init 0.0
  in
  Mlmisc.print_floats_4 t o2_out map air_fuel_ratio

(* Test: feed the discrete controller with values logged from Simulink *)
let hybrid testcontrolleronly () =
  let der t = 1.0 init 0.0 in
  present (init) | (period (0.0 | 0.001)) ->
      let
      rec air_fuel_ratio = read_floats "airfuel.in"
      and o2_out         = read_floats "o2out.in"
      and map            = read_floats "map.in"
      and sensor_values  = {throttle=read_floats "throttle.in";
                           speed=300.0;
                           ego=o2_out;
                           pressure=map}
      and fuel_rate = fuel_rate_control (sensor_values)
      in Mlmisc.print_floats_2 t (float_of_int 1)
  else ()


let hybrid simulation (sw_engspeed, sw_throt, sw_speed, sw_ego, sw_map)
  = (t, fuel_rate, o2_out, map, air_fuel_ratio)
  where
  rec der t = 1.0 init 0.0

  and throttle_angle = zigzag (4.0, 5.0) +. 15.0
  and throttle = if sw_throt    then throttle_angle else   0.0
  and engspeed = if sw_engspeed then 300.0          else 700.0
  and speed    = if sw_speed    then engspeed  else   0.0
  and ego      = if sw_ego      then o2_out    else  12.0
  and pressure = if sw_map      then map       else   0.0

  and sensors  = {throttle=throttle; speed=speed; ego=ego; pressure=pressure}
  and init fuel_rate = 1.209028005600
  and present (period (0.01)) ->
    do
      fuel_rate = fuel_rate_control(sensors)
    done

  and (o2_out, map, air_fuel_ratio) =
        engine_gas_dynamics (engspeed, throttle_angle, last fuel_rate)

let sensors_baseline () =
  let sw_engine =   true
  and sw_throttle = true
  and sw_speed =    true
  and sw_ego =      true
  and sw_map =      true
  in
  (sw_engine, sw_throttle, sw_speed, sw_ego, sw_map)

let node sensors_mapfail () =
  let sw_engine =   true
  and sw_throttle = true
  and sw_speed =    true
  and sw_ego =      true
  and sw_map =      not (square_pulse (500, 900))
  in
  (sw_engine, sw_throttle, sw_speed, sw_ego, sw_map)

open Scope

let node sensor_scope (sw_engine, sw_throttle, sw_speed, sw_ego, sw_map) =
  let engine   = if sw_engine   then 1. else -1.
  and throttle = if sw_throttle then 1. else -1.
  and speed    = if sw_speed    then 1. else -1.
  and ego      = if sw_ego      then 1. else -1.
  and map      = if sw_map      then 1. else -1.
  in
  scope5(-1., 1., ("engine"  , linear, 0.15 *. engine   +. 0.85),
                  ("throttle", linear, 0.15 *. throttle +. 0.45),
                  ("speed"   , linear, 0.15 *. speed    +. 0.05),
                  ("ego"     , linear, 0.15 *. ego      -. 0.35),
                  ("map"     , linear, 0.15 *. map      -. 0.75))

let node plot(t, scenario, sensors, fuelc_rate, o2_out, map, air_fuel_ratio) =
  let
  rec s1 = sensor_scope(sensors)
  and s2 = scope (0., 2.,   ("Fuel (g/s)"    , linear, fuelc_rate))
  and s3 = scope (0., 400., ("Air/Fuel Ratio", linear, air_fuel_ratio))
  and s4 = scope2(0., 1.,   ("o2_out"        , linear, o2_out),
                            ("map"           , linear, map))
  in
  window4("Fuel controller: " ^ scenario, 8., t, s1, s2, s3, s4)

let hybrid basicfuel () =
  let rec init sensors = sensors_baseline ()
  and (t, fuelc_rate, o2_out, map, air_fuel_ratio) =
    simulation (sensors) in
  present (init) | (period (0.05)) ->
    plot(t, "basicfuel",
            sensors,
            fuelc_rate,
            o2_out,
            map,
            air_fuel_ratio)
  else ()

let hybrid mapfail () =
  let
  rec init sensors = sensors_baseline ()
  and (t, fuelc_rate, o2_out, map, air_fuel_ratio) = simulation (sensors)
  and present (period (0.01)) -> do sensors = sensors_mapfail () done
  in
  present (init) | (period (0.05)) ->
      plot(t, "mapfail",
              sensors,
              fuelc_rate,
              o2_out,
              map,
              air_fuel_ratio)
  else ()

(* TODO: interactive control for switches, plotter to function like the one in
         Simulink, i.e. fixed period to show the same curve *)
