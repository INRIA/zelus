# Reimplementation of the Mathworks Fault Tolerant Fuel Controller example in Zélus v2

Timothy Bourke, INRIA 2010.

---

Draw comparisons between the Simulink model and the Zélus one:

```
  make diff_plot
```

There are two scenarios:
* `basicfuel` Normal behavior of the system
* `mapfail` The map sensor fails between `t = 5` and `t = 9`

---

Library Routines
----------------

* `mlmisc.ml`
  Miscellaneous library routines in Ocaml.

* `lookup.ml`
  Implementation of the Simulink lookup block.

  Replicates most features for one and two dimensional blocks, including
  optimisations for evenly-spaced lookups, various lookup search algorithms
  (with and without memory), different interpolation and extrapolation
  options. Supports linear interpolation, but not cubic-spline
  interpolation. Support for mixing different datatypes using a mix of
  functors and polymorphism.

* `library.zls`
  Miscellaneous Lucid Synchrone nodes, including IIR filters.

  This library should be considered a first-draft prototype. It could be
  improved and many issues are not yet resolved.


Case-study specific
---------------------
* `fuelc_data.ml`
  Contains an Ocaml version of the Matlab file:
    toolbox/simulink/simdemos/automotive/sldemo_fuelsys_data.m
  With data for the simulation. Especially the four lookup tables.

* `fuelc_common.zls`
  Provides a handful of wrapper nodes for fuelc_data and lookup, and some other
  miscellaneous functions.

* `fuelc_engine.zls`
  Continuous model of the engine gas dynamics. Adapted from the Simulink
  original using the Runge Kutta combinators.

* `fuelc_logic.zls`
  Reimplementation of the Stateflow fuel controller block using a
  composition of automaton nodes.

* `fuelc_subsys.zls`
  Reimplementation of the discrete dataflow components of the fuel
  controller.

* `fuelc.zls`
  Combines the continuous and discrete models. Also provides a few test
  harnesses.

  This combination is not completely satisfactory. More work remains on how
  best to combine discrete and continuous components in feedback.

* `dumpnode.zls`
  Reimplementation of the main nodes using Dump instead of Scope.
