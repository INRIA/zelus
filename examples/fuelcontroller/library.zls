
(* Useful discrete blocks *)

let node was (x) = x'
  where rec x' = x -> (pre x' || x)

let node after (n, ev) =
  let rec x = 0 -> if ev then pre x + 1 else pre x in
  was (x >= n)

let node redge (c) = c && not (false fby c)
let node fedge (c) = redge (not c)

let node sample (n) =
  let rec cpt =  0 -> if pre cpt = n - 1 then 0 else pre cpt + 1
  and ok = cpt = 0
  in
  ok

let node square_pulse (start, stop) =
  let rec cnt = 0 fby (cnt + 1) in
  (cnt >= start) && (cnt <= stop)

(* Transpose form IIR filter *)

let node iir_filter_1st ((n0, n1), (d1), x) = y where
  rec y = n0 *. x +. (0. fby u)
  and u = n1 *. x -. d1 *. y

let node iir_filter_2nd ((n0, n1, n2), (d1, d2), x) = y where
  rec y = n0 *. x +. (0. fby u)
  and u = n1 *. x -. d1 *. y +. (0. fby v)
  and v = n2 *. x -. d2 *. y

let node iir_filter_3rd ((n0, n1, n2, n3), (d1, d2, d3), x) = y where
  rec y = n0 *. x +. (0. fby u)
  and u = n1 *. x -. d1 *. y +. (0. fby v)
  and v = n2 *. x -. d2 *. y +. (0. fby w)
  and w = n3 *. x -. d3 *. y

(* Discrete-Time Integrators *)

(* Note: It is interesting to compare the need here for an explicit sample-time
         versus the sample-time propagation and inheritence possible in
         Simulink. The issue is ultimately one of relating a metric to logical
         clocks (i.e. the physical time between logical clock ticks).
*)
let node forward_euler (initial, gain, gperiod, x) = y where
  rec y = initial fby (y +. gain *. gperiod *. x)

let node read_floats (filename) =
  let rec file = (open_in (filename)) fby file in
  float_of_string (Mlmisc.input_line file)

(* Useful hybrid blocks *)

let hybrid zigzag (zperiod, amplitude) = y where
  rec
  init y = -. amplitude
  and slope = 4.0 *. amplitude /. zperiod
  and automaton
      | Rising -> do
            der y = slope
          until (up(y -. amplitude)) then Falling

      | Falling -> do
            der y = -. slope
          until (up(-. amplitude -. y)) then Rising

(* State-space equations *)

let hybrid statespace (a, b, c, d, is, u) = y where
  rec der s = a *. last s +. b *. u init is
  and y = c *. s +. d *. u
