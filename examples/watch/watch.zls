open Draw

(******************* Pendulum Clock **********************)


let x0 = 400.
let y0 = 600.


let g = 9.81
let l = 4.

let k1 = 5.
let k2 = 1.
let pi = 3.1415

(* Pendulum parameters *)
let theta0 = 1.

(* Spring parameters *)
let h0 = 2.

(* escapement parameters *)
let thetac = 0.4

let hybrid pendulum (theta0, thetap0) = theta where
   rec der thetap =  -. (g /. (10. *. l)) *. sin (theta) init thetap0
   and der theta = thetap init theta0

let hybrid chain (theta0, thetap0, move) = theta where
  rec automaton
      | Stop(th) ->
          do theta = th
          until move() then Move(theta)
      | Move(th) ->
          do theta = pendulum(th, thetap0)
          until move() then Stop(theta)
  init Stop(0.0)

let hybrid balance theta0 = theta where
  rec der thetap =  -. k1 *. theta init 0.0
  and der theta = thetap init theta0

let hybrid spring h0 = h where
  rec der v = -. k2 *. h init 0.0
  and der h = v init h0

let hybrid hand ti = t where
  rec der t' = 1.0 init 0.0
  and der t = t' init ti

let hybrid set hi = h where
  rec der h' = 0.5 init hi
  and h = min h0 h'

let hybrid escapement theta = (tic, rtic, toc, rtoc) where
  rec present
        | up (-. theta -. thetac) -> do emit tic = () done
        | up (theta +. thetac) -> do emit rtic = () done
        | up (theta -. thetac) -> do emit toc = () done
        | up (-. theta +. thetac) -> do emit rtoc = () done

let hybrid clockwatch (h0, t0, theta, r) = (h, t, active) where
  rec (tic, rtic, toc, rtoc) = escapement theta
  and init active = true
  and init t = t0
  and init h = h0
  and automaton
      | Move(hi, ti) ->
          do h = spring hi
          and t = hand ti
          until tic() | toc() then Stop(h,t)
          else up (0.1 *. h0 -. h) then Exhausted(t)
          else r() then Setting(h,t)
      | Stop(hi, ti) ->
          do active = true
          until rtic() | rtoc() then Move(hi,ti)
          else r() then Setting (hi,ti)
      | Exhausted(ti) ->
          do active = false
          until r() then Setting(h,ti)
      | Setting (hi, ti) ->
          do h = set hi
          and active = false
          until r() then Stop (h,ti)
  init Stop(h0, t0)

(********** Simulation ************)

let hybrid keyboard () = set, move where
  rec init ok = 0
  and s = period (0.04)
  and present s -> do ok = input ()done
  and present s on (ok = 1) -> do emit set = () done
  and present s on (ok = 2) -> do emit move = () done


let hybrid main () =
  let ok = period (0.04) in
  let theta = balance theta0 in
  let (tic, _, toc, _) = escapement theta in
  let r,m = keyboard () in
  let (h, t, active) = clockwatch (h0, 0.0, theta,r) in
  let thb = t *. 3. /. 2. in
  let thl = thb /. 60. in

  let twb = t *. 2. in
  let twl = -.twb *. (120. /. 20.)  in

  let tc = chain (0.0, 0.2, m) in

  present ok ->
             draw_system
               (x0, y0, l, tc,
                thetac, theta,
                h0, h,
                thb, thl,
                twb, twl)
        | tic() on active -> play_tic ()
        | toc() on active  -> play_toc ();
    ()
