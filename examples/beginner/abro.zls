(* the ABRO example (Berry, "Constructive Semantics of Esterel" *)
(* await for inputs A and B *)
(* - emits O when A and B has been received *)
(* - resets the behavior every time R is true *)
(* - done with valued signals *)

let node expect x = o where
  automaton
  | Await -> do unless x() then Run
  | Run -> do emit o = () done

let node abo (a, b) = o where
  rec automaton
      | Await ->
          let o1 = expect a
	  and o2 = expect b in
          do until o1() & o2() then do emit o = () in Stop
      | Stop ->
          do done

let node abro_r (a, b, r) = o where
  reset
    o = abo (a, b)
  every ?r


let node abro (a, b, r) = o where 
  rec 
    automaton
    | Init ->
	do automaton
	| Await ->
            let o1 = expect a
	    and o2 = expect b in
            do until o1() & o2() then do emit o = () in Stop
        | Stop ->
            do done
	unless r() then Init
      
let node abro2 (a, b, c, d, e, r) = o where
  rec
    automaton
    | Init ->
	do automaton
	| Await ->
            let o1 = expect a
	    and o2 = expect b
            and o3 = expect c 
            and o4 = expect d 
            and o5 = expect e in
            do until o1() & o2() & o3() & o4() & o5() then do emit o = () in Stop
        | Stop ->
            do done
	unless r() then Init
      
let node inputs () =
  let rec clock_a = false fby true fby false fby true fby false fby clock_b
  and clock_b = false fby false fby true fby false fby false fby clock_e
  and clock_c = false fby true fby true fby clock_a
  and clock_d = false fby false fby true fby false fby true fby clock_b
  and clock_e = false fby true fby clock_b
  and clock_r = false fby false fby false fby false fby false fby false fby
          false fby false fby false fby false fby false fby false fby
          true
  and a = present clock_a -> ()
  and b = present clock_b -> ()
  and c = present clock_c -> ()
  and d = present clock_d -> ()
  and e = present clock_e -> ()
  and r = present clock_r -> () in
  a, b, c, d, e, r

let node main () =
  let i = read_line () in
  let match i with
    | "a" -> do emit a = () done
    | "b" -> do emit b = () done
    | "r" -> do emit r = () done
    | _ -> do done in
  let o = abro(a, b, r) in
  present o() -> print_endline "output!" else ()

