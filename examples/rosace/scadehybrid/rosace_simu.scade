package Simulation

  hybrid Rosace() returns (delta_x_c:float64 last=delta_x_eq;
                           delta_e_c:float64 last=delta_e_eq)
  var Vz, Va, q, h, az : float64;
      Vz_meas, Va_meas, q_meas, h_meas, az_meas : float64;
      Vz_c, T, delta_e : float64;
  let
    -- filters
    Vz_meas =  (activate Controller::V_filter every period(0.0, Ts_f_Vz) 
                  initial default 0.0)(Vz, 0.0, 0.0);
    Va_meas = (activate Controller::V_filter every period(0.0, Ts_f_Va)
                  initial default 0.0)(Va, - 219.8948604405, 230.0);
    q_meas =  (activate Controller::q_filter every period(0.0, Ts_f_q)
                  initial default 0.0)(q);
    h_meas =  (activate Controller::h_filter every period(0.0, Ts_f_h)
                  initial default 0.0)(h);
    az_meas = (activate Controller::az_filter every period(0.0, Ts_f_az)
                  initial default 0.0)(az);

    -- Controllers
    -- delta_e_c = (delayed Controller::Vz_control every period(0.0, Ts_K2) initial default delta_e_eq) ...
    activate if period(0.0, Ts_K2) then
      delta_e_c = fby(Controller::Vz_control(Vz_c, Vz_meas, q_meas, az_meas); 1; delta_e_eq);
    else
    returns delta_e_c;
    activate if period(0.0, Ts_K1) then
      delta_x_c = fby(Controller::Va_control(Va_c, Va_meas, q_meas, Vz_meas); 1; delta_x_eq);
    else
    returns delta_x_c;
    Vz_c = (activate Controller::altitude_hold every period(Ts_h, Ts_h)
               initial default 0.0)(h_c,  h_meas);

    -- Environment
    Va, az, q, Vz, h = Flight_Dynamics(T, delta_e);
    T = Engine(delta_x_c);
    delta_e = Elevator(delta_e_c);
  tel

  hybrid Engine(delta_x_c : float64) returns (thrust : float64)
  var dx:float64 last=CI_dx;
  let
    thrust = D_dx * delta_x_c + C_dx * dx;
    der dx = B_dx * delta_x_c + A_dx * dx;
  tel

  hybrid Elevator(delta_e_c : float64) returns (delta_e : float64)
  var de:float64^2 last=CI_de;
  let
    delta_e = D_de * delta_e_c + (vect::ScalProd<<2>>)(C_de, de);
    de = (int_vect<<2>>)(CI_de,
             (map $+$ <<2>>)((vect2::ScalMult<<2>>)(delta_e_c, B_de),
                             (vect::MatVectProd<<2,2>>)(A_de, de)));
  tel

  hybrid Flight_Dynamics(T, delta_e : float64)
    returns (Va, az, q, Vz, h: float64)
  var x:float64^5;
      Za:float64;
      xdot:float64^5;
  let
    Za, xdot = Flight_Dynamics_Model([T, delta_e]@x);
    x = (int_vect<<5>>)(CI_FD, xdot);
    -- Airspeed
    Va = mathext::SqrtR(xdot[0]*xdot[0] + xdot[1]*xdot[1]);
    -- Norm. Acc.
    az = g0 * mathext::CosR(xdot[3]) + 1 / mass * Za;
    -- Pitch rate
    q = xdot[2];
    -- Vert. speed
    Vz = xdot[1] * mathext::CosR(xdot[3]) 
         - xdot[0] * mathext::SinR(xdot[3]);
    -- Altitude
    h = xdot[4];
  tel

  function Flight_Dynamics_Model(x:float64^7)
    returns (Za:float64; xdot:float64^5)
  var rho, V, alpha, de, q:float64;
      qbar, CD, CL, Cm, Xa, Ma:float64;
      udot, wdot, qdot, thetadot, hdot:float64;
  let
    -- Air density
    rho = rho0 * mathext::PowerRR(1.0 + T0_h / T0_0 * x[6], 
                                  - g0 / (Rs * T0_h) - 1.0);
    -- Airspeed
    V = mathext::SqrtR(x[2]* x[2] + x[3]*x[3]);
    -- Angle of attack
    alpha = mathext::AtanR(x[3] / x[2]);
    -- Elevator deflection
    de = x[1];
    -- Pitch rate
    q = x[4];

    -- Dynamic pressure
    qbar = 0.5 * rho * V * V;
    -- Aerodynamic coefficients
    CD, CL, Cm = Aero_coefficients(de, alpha, q, V);
    -- Aerodynamic Forces and Moment
    Xa, Za, Ma = Aero_forces_moment(alpha, CD, CL, Cm, qbar);

    udot = - g0 * mathext::SinR(x[5]) - x[4] * x[3] 
           + 1.0 / mass * (x[0] + Xa);
    wdot = g0 * mathext::CosR(x[5]) + x[4] * x[2] + 1.0 / mass * Za;
    qdot = 1.0 / I_y * Ma;
    thetadot = x[4];
    hdot = x[2] * mathext::SinR(x[5]) - x[3] * mathext::CosR(x[5]);
    xdot = [udot, wdot, qdot, thetadot, hdot];
  tel

  function Aero_coefficients(de, alpha, q, V:float64)
    returns (CD, CL, Cm:float64)
  let
    -- Drag coefficient
    CD = CD_0 + CD_deltae * de 
          + CD_alpha * (alpha - alpha_0) * (alpha - alpha_0);
    -- Lift coefficient
    CL = CL_deltae * de + CL_alpha * (alpha - alpha_0);
    -- Pitching coefficient
    Cm = Cm_0 + Cm_deltae * de + Cm_alpha * alpha
           + Cm_q * (cbar/2) * q / V;
  tel

  function Aero_forces_moment(alpha, CD, CL, Cm, qbar:float64)
    returns (Xa, Za, Ma:float64)
  let
    -- Xb-force
    Xa = (S * qbar) 
           * (CL * mathext::SinR(alpha)  - CD * mathext::CosR(alpha));
    -- Zb-force
    Za = (S * qbar) 
           * (- CL * mathext::CosR(alpha) - CD * mathext::SinR(alpha));
    -- Pitching moment
    Ma = (S * qbar) * (Cm * cbar);
  tel
end;
