package Controller
  package AltitudeHold
    node Logic_SpeedCommand(Sum3, h_meas, h_c, Memory : float64)
      returns (Climb_command : float64)
    var
      DT_Integrator, AltitudeCaptureHold, Sum1 : float64;
    let
      Climb_command =
        if Sum3 > h_switch
        then Vz_c0
        else if Sum3 < -h_switch
        then -Vz_c0
        else AltitudeCaptureHold;
      DT_Integrator = 
        AltitudeHold::DT_Integrator(Ki_h * Sum1, Sum1, Memory);
      AltitudeCaptureHold = Kp_h * Sum1 + DT_Integrator;
      Sum1 = h_meas - h_c;
    tel

    function CI_AltHold(in1 : float64; in2 : float64)
      returns (CI_AltHold : float64)
    let
      CI_AltHold = in2 - in1 * Kp_h;
    tel

    node DT_Integrator(in1, Mux1, Mux2 : float64) returns (DT_Integrator : float64)
      DT_Integrator =
        CI_AltHold(Mux1, Mux2) -> Ts_h * pre in1 + pre DT_Integrator;
  end;

  node V_filter(in1, x1_0, y1_0 : float64) returns (y1 : float64)
  var x1 : float64;
  let
    y1 = y1_0 -> pre x1 + 1.9555783981 * pre y1 + 0.0004862126 * pre in1;
    x1 = x1_0 -> - 0.9565436755 * pre y1 + 0.0004790649 * pre in1;
  tel

  node Va_control(Va_c, q_meas, Vz_meas, Va_meas : float64)
    returns (delta_x_c : float64)
  var Sum1, Sum4, DT_Integrator : float64;
  let
    Sum4 = Va_c - Va_meas;
    Sum1 = Va_meas - Va_eq;
    delta_x_c =
      DT_Integrator + K1_Va * Sum1 + K1_q * q_meas + K1_Vz * Vz_meas;
    DT_Integrator =
      delta_x_eq -> Ts_K1 * pre (K1_intVa * Sum4) + pre DT_Integrator;
  tel

  node Vz_control(Vz_c, az_meas, Vz_meas, q_meas : float64)
    returns (delta_e_c : float64)
  var _L15 : float64;
  let
    _L15 = delta_e_eq -> pre (K2_intVz * Ts_K2 * (Vz_c - Vz_meas) + _L15);
    delta_e_c =
      _L15 + K2_Vz * Vz_meas + K2_q * q_meas + K2_az * az_meas;
  tel

  node altitude_hold(h_c, h_meas : float64) returns (Vz_c : float64)
  let
    Vz_c =
      AltitudeHold::Logic_SpeedCommand(h_c - h_meas, h_meas, 
                                       h_c, 0.0 -> pre Vz_c);
  tel

  node az_filter(in1 : float64) returns (y1 : float64)
  var x1 : float64;
  let
    y1 = 0.0 -> pre x1 + 1.1580458998 * pre y1 + 0.1453448224 * pre in1;
    x1 = 0.0 -> - 0.4112407014 * pre y1 + 0.1078499792 * pre in1;
  tel

  node h_filter(in1 : float64) returns (y1 : float64)
  let
    y1 =
      10000.0 ->
        pre ((- 5371.5934770219 ->
            pre (y1 * - 0.5867561560 + 0.0495968083 * in1)) +
         in1 * 0.0592704176 +
         1.4778889301 * y1);
  tel

  node q_filter(q : float64) returns (q_meas : float64)
  var x : float64;
  let
    x1 = 0.0 -> - 0.7660001018 * pre q_meas + 0.0148576490 * pre q;
    q_meas = 0.0 -> pre x + 1.7349032059 * pre q_meas + 0.0162392470 * pre q;
  tel
end;
