(* An example where a valued signal carries a node *)
(* the application is reset every time the signal is present *)

(* function which computes integers greater (smaller) than an initial value *)
let node increase x = let rec o = x fby o + 1 in o
let node decrease x = let rec o = x fby o - 1 in o

(* A reconfiguration operator. Wait for the signal [f] to be *)
(* present. When present with value [v], run (v x) *)
(* [f0] is the initial function that is applied unless [f] is present *)
let node reconf(f0)(f, x) =
  automaton
  | Await -> do run f0 x unless f(v) then Run(v)
  | Run(v) -> do Run.irun(v, x) unless f(c) then Run(c)
 
(* the main function *)
let node main() =
  local x, f
  do init x = 0
  and (* this automaton alternate between emiting [decrease] *)
      (* and increase on edge detection *)
      automaton
      | Incr -> do unless (last x >= 10) then do emit f = decrease in Decr
      | Decr -> do unless (last x <= -10) then do emit f = increase in Incr
      end
  and
     x = reconf(increase)(f, last x) in
  print_int x;
  print_newline ()

  
