(* The Heater model presented by Nicolas Halbwachs for *)
(* his tutorial on Lustre, College de France, 2010. *)

(* This file give a continuous-time version of it. Module Heat *)
(* is the synchronous discrete-time version written in Zelus. *)

open Constants

(* Integrator *)
let hybrid int(x0, xprime) = x where
  rec der x = xprime init x0

(* Model of a heater *)
let hybrid heater(c, alpha, beta, temp_ext, temp0, u) = temp where
  rec temp =
    int(temp0,
	if u then alpha *. (c -. temp) 
	else beta *. (temp_ext -. temp))

(* The same but without calling the function [int] *)
let hybrid heater2(c, alpha, beta, temp_ext, temp0, u) = temp where
  rec der temp =
        if u then alpha *. (c -. temp) 
	else beta *. (temp_ext -. temp) init temp0
    
(* relay. Warning: this model has a critical race! up(.) only detect *)
(* zero-crossing during integration, that is its argument is suposed to *)
(* to have a discontinuity. In case, low, high or v *)
(* have a discontinuous jump outside of integration, it is not taken *)
(* into account *)
let hybrid relay_cc(low, high, v) = u where
  rec u = present
          | up(low -. v) -> true
          | up(v -. high) -> false init (v < low)
				       

(* X-crossing discrete and continuous *)
let hybrid xup(x) = present up(x) | (disc(x)) on (x >= 0.0) -> ()

(* Relay with an automaton *)
let hybrid relay_six(low, high, v) = u where
  rec automaton
      | Low -> do u = false unless (xup(low -. v))() then High
      | High -> do u = true unless (xup(v -. high))() then Low
      end

(* Relay in direct form *)
let hybrid relay_c(low, high, v) = u where
  rec u = present
          | (xup(low -. v))() -> true
          | (xup(v -. high))() -> false
          init (v < low)

	      
(* Both the environment and the controller in continuous-time *)
let hybrid system(reference) = (u, temp) where
  rec
      u = relay_c(reference -. low, reference +. high, temp)
  and
      temp = heater(c, alpha, beta, temp_ext, temp_0, u)

(* The environment in continuous-time but with a periodically *)
(* sampled discrete-time controller *)
let hybrid system_with_sampled_relay(h)(reference) = (u, temp) where
  rec
      u = present
            (period (h)) ->
	       Heat.relay(reference -. low, reference +. high, temp)
          init false
  and
      temp = heater(c, alpha, beta, temp_ext, temp_0, u)
