open Constants
open Heat

let node source(r) = Observers.piecewise_constant(0.0)(20.0)(r)
let node source2(r) = Observers.linear_constant(0.1)(0.0)(20.0)(r)

(* Oracle. Define the expected property *)
let node oracle(low, high, u, reference, measured) =
  (* inside the bound *)
  let outside = (measured < high) && (measured > low) in
  (* u must not oscillate *)
  let ok1 = not (Observers.oscillate(u)) in
  (* when [measured] is outside of the interval [low, high] and the reference *)
  (* does not change, the error must decrease *)
  let ok2 = if outside && (Observers.constant reference)
   then Observers.decrease(abs_float(reference -. measured)) else true in
  let ok3 = ok1 && ok2 in
  (* computes a new test when [measured] is inside for at least [enough] *)
  (* instants *)
  let inside_enough = Observers.count(h)(stop_time, not outside) in
  ok3, inside_enough
 
(* Test of the system: connect a source generator, the system *)
(* and the oracle *)
let node test (manual_mode, input) = (u, reference, measured, ok) where
  rec reference =
      present manual_mode -> source(true -> last enough) else input
  and (u, measured) = system(reference)
  and ok, enough = oracle(low, high, u, reference, measured)

 
