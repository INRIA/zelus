(* The heater model. In this version, the solver for *)
(* ODEs and zero-crossings is embedded into a discrete-time node *)
(* this is the so-called "co-simulation" form *)


open Constants
open Heatc
open Node

let h = 0.5
    
let node system(reference) = (time, u, temp, status) where
  (* Compute the dynamics of the system. Draw an observation *)
  (* at times [n * h] with n in Nat or when a zero-crossing occurs *)
  rec { time = time; status = status; result = u, temp } =
    Node.solve Heatc.system stop_time (next_horizon, reference)
  and next_horizon =
    h fby (if time >= next_horizon then next_horizon +. h else next_horizon)
