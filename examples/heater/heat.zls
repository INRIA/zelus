(* The Heater model presented by Nicolas Halbwachs for *)
(* his tutorial on Lustre, College de France, 2010. *)

open Constants

(* Integrator Euler (forward) *)
(* for all n in Nat. x(0) = x0(0) and x(n) = x(n-1) + h * xprime(n-1) *)
let node euler(h)(x0, xprime) = x
  where rec x = x0 -> pre (x +. h *. xprime)


(* Model of a heater *)
(* (temp(n+1) - temp(n)) / h = alpha(n) * (c(n) - temp(n)) if u(n) *)
(*                             beta(n) * (temp_ext(n) - temp(n)) otherwise *)

let node heater(h)(c, alpha, beta, temp_ext, temp0, u) = temp where
  rec temp =
    euler(h)(temp0, 
             if u then alpha *. (c -. temp) 
             else beta *. (temp_ext -. temp))

(* Relay (low/high threshold; a single boolean output *)
(* discrete time *)
let node relay(low, high, v) = u where
  rec u = if v < low then true
	  else if v > high then false
	  else false -> pre u

let node relay_bis(low, high, v) = u where
  rec u = present (v < low) -> true | (v > high) -> false init false
      
let node relay_six(low, high, v) = u where
  rec automaton
      | Low -> do u = false unless (v <= low) then High
      | High -> do u = true unless (v >= high) then Low
      end

     
(* Main program *)
let node system(reference) = (u, temp) where
  rec
      u = relay(reference -. low, reference +. high, temp)
  and
      temp = heater(h)(c, alpha, beta, temp_ext, temp_0, u)

