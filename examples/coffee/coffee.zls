(* The Coffee Machine (originally introduced by Milner in CCS book) *)
(* this version is adapted from Kevin Hammond description in Hume   *)

type coin = Dime | Nickel
type drinks = Coffee | Tea
type buttons = BCoffee | BTea | BCancel

let node vend (drink, cost, v) = (o1, o2) where
  match v >= cost with
  | true ->
      do emit o1 = drink
      and o2 = v - cost
      done
  | false ->
      do o2 = v done
  end

let node coffee (coin, button) = (drink, return) where
  rec init v = 0
  and present
      | coin(Nickel) ->
        do v = last v + 5 done
      | coin(Dime) ->
          do v = last v + 10 done
      | button(BCoffee) ->
          do (drink, v) = vend (Coffee, 10, (last v))
          done
      | button(BTea) ->
          do (drink, v) = vend (Tea, 5, (last v))
          done
      | button(BCancel) ->
          do v = 0
          and emit return = last v
          done
      end

(* this verion is equivalent but generates a better code *)
let node coffee_opt (coin, button) =
  let rec init v = 0
  and present
      |  coin(w) ->
          match w with
             | Nickel -> do v = last v + 5 done
             | Dime -> do v = last v + 10 done
          end
      | button(b) ->
          match b with
             | BCoffee -> do (drink, v) = vend (Coffee, 10, (last v)) done
             | BTea -> do (drink, v) = vend (Tea, 5, (last v)) done
             | BCancel -> do v = 0 and emit return = last v done
          end
     end in
    (drink, return)

let node coffee_parallel (coin, button) = (drink, return) where
  rec init v = 0
  and present
      | coin(Nickel) ->
        do v1 = last v + 5 done
      | coin(Dime) ->
          do v1 = last v + 10 done
      else do v1 = last v done
  and present
      | button(BCoffee) ->
          do (drink, v) = vend (Coffee, 10, v1)
          done
      | button(BTea) ->
          do (drink, v) = vend (Tea, 5, v1)
          done
      | button(BCancel) ->
          do v = 0
          and emit return = v1
          done
      end

(** programming the environment *)

(* producing events from the keyboard *)
let node input key = (coin, button) where
  match key with
  | "N" -> do emit coin = Nickel done
  | "D" -> do emit coin = Dime done
  | "C" -> do emit button = BCoffee done
  | "T" -> do emit button = BTea done
  | "A" -> do emit button = BCancel done
  | _ -> do done
  end

(* printing things *)
let node print_drink e =
  present e(d) ->
  match d with
  | Coffee -> print_endline "Coffee\n"
  | Tea -> print_endline "Tea\n"
  end

let node print_coin e =
  present e(d) ->
  match d with
  | Nickel -> print_endline "Nickel\n"
  | Dime -> print_endline "Dime\n"
  end

let node print_return e =
  present e(d) ->
    print_endline ((string_of_int d)^"\n")

let node print_button e =
  present e(d) ->
  match d with
  | BCoffee -> print_string "BCoffee\n"
  | BTea -> print_string "BTea\n"
  | BCancel -> print_string "BCancel\n"
  end

let node output (drink, return) = () where
  rec _ = print_drink drink
  and _ = print_return return

let node main () =
  let key = read_line () in
  let (coin, button) = input key in
  let drink, return = coffee (coin, button) in
  output (drink, return)
