(* Operators to simulate push/pull streams. This follows *)
(* my reading of the PhD. thesis of Amos Robinson (2018) *)
(* and a email discussion with Gregoire Hamon, 1/01/09 *)
(* who suggested to encode pull streams with higher-order functions *)

(* Zelus is only "push based" and not "pull based". With clocks of LS v1 *)
(* it would be possible to encode pull based stream by *)
(* constraining an input to be present only on some condition. *)
(* As suggested by Gregoire Hamon, it can be simulated with higher-order *)
(* functions in a simpler way *)

type 'a sorted = { tag: int; value: 'a }
      
(* stores the value of [v] when [c] is true *)
let node current(c, v) = o where
  rec o = present c -> v init v

(* run two functions [left(x)] and [right(x)] with exclusive clocks *)
(* according to the value of a selector *)
(* the result of left(x) and right(x) must be sorted, that is *)
(* select(pre(x), x) must be true. select is a total order. *)
let node msort(left)(right)(select)(x) = (output, pask, l, r) where
  rec v = present pask -> run left x else run right x
  and l = current(pask, v)
  and r = current(not pask, v)
  and pask = true fby ask
  and ask = run select (l, r)
  and output = if ask then l else r

(*
let node msort(left)(right)(select)(x) = (output, pask, l, r) where
  rec l = presenti ask_l -> run left x
  and r = presenti ask_r -> run right x
  and ask_l = pre(ask)
  and ask_r = not(ask_l)
  and ask = run select (l, r)
  and output = if ask then l else r

let node msort(left)(right)(select)(x) = (output, pask, l, r) where
  new o1 = left() in
  new o2 = right() in
  automaton
  | Run(v, w) ->
    do output = if v < w then v else w
    then if v < w then Run(o1#step(), w) else Run(v, o2#step())
  init
    let v = o1#step() in
    let w = o2#step() in
    Run(v, w)
  end

val msort : (unit -> { step : unit -> 'a with init step < (step # eps) } ->
            { unit -> { step : unit -> 'a with init step < (step # eps) } ->
            (int * int => int) -> int => int * bool * int * int

let system fby(v) as self =
  mem m = v
  when get() returns (o)
    o = last m
  when set(v) returns ()
    m = v
  step(v) returns (o)
    do o = self#get() in
      () = self#set(v) done
*)
		 
(* a sorted stream *)
let node sample() = { tag = o; value = o } where
  rec o = (0 fby o) + Random.int 5

let node sample1() = { tag = o; value = o } where
  rec o = 0 fby 1 fby 4 fby 10 fby 14

let node sample2() = { tag = o; value = o } where
  rec o = 2 fby 3 fby 3 fby 5 fby 6
      
(* Example: take two sorted streams and returns a sorted one *)
let node select(x, y) = x.tag < y.tag

let node main1() =
  let o, pask, l, r = msort(sample)(sample)(select)() in
  print_string "left = ";
  print_int l.value;
  print_string " right = ";
  print_int r.value;
  print_string " side = ";
  print_string (if pask then "left" else "right");
  print_string " result = "; print_int o.value;
  print_newline ()

(* filter a stream according to a boolean condition *)
let node filter(select)(x) = o where
  rec present (run select x) -> do emit o = x done

(* remove elements such that o = pre(o) *)
let node duplicate(x) = true -> x.value <> pre x.value

let node remove_duplicates(x) = filter(duplicate)(x)
  
let node main2() =
  let o = sample () in
  let v = remove_duplicates(o) in
  print_string "value = "; print_int o.value;
  (present
     v(x) -> (print_string " result = "; print_int x.value));
  print_newline ()

(* append two streams *)
let node append(left)(right)(cond)(x) = o where rec
  (* first run left(x) then right(x) when cond(x) is true *)
  automaton
  | First ->
      do o = run left x until (run cond o) then Second
  | Second ->
      do o = run right x done
  end

let node fourty_two(x) = x.value >= 42

let node main3() =
  let o = append(sample)(sample)(fourty_two)() in
  print_string "value = "; print_int o.value;
  print_newline ()
    
