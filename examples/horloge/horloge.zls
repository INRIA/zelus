open Draw

(******************* Pendulum Clock **********************)

let g = 9.81
let pi = 3.1415

(* Pendulum parameters *)
let l = 1.5
let theta0 = 0.5

(* Atwood parameters *)
let m1 = 11.
let m2 = 10.
let h0 = 2.

(* escapement parameters *)
let thetac = 0.4

let hybrid pendulum theta0 = theta where
  rec der thetap =  -. (g /. l) *. sin (theta) init 0.0
  and der theta = thetap init theta0

let hybrid atwood h0 = (h,v) where
  rec der v = g *. (m2 -. m1) /. (m2 +. m1) init 0.0
  and der h = v init h0

let hybrid hand (ti, v) = t where
  rec der t = -. v init ti

let hybrid set hi = h where
  rec der h' = 0.5 init hi
  and h = min h0 h'

let hybrid escapement theta = (tic, rtic, toc, rtoc) where
  rec present
        | up (-. theta -. thetac) -> do emit tic = () done
        | up (theta +. thetac) -> do emit rtic = () done
        | up (theta -. thetac) -> do emit toc = () done
        | up (-. theta +. thetac) -> do emit rtoc = () done

let hybrid clockwatch (h0, t0, theta, r) = (h, t, active) where
  rec (tic, rtic, toc, rtoc) = escapement theta
  and init active = true
  and init t = t0
  and init h = h0
  and automaton
      | Move(hi, ti) ->
          do (h,v) = atwood hi
          and t = hand (ti,v)
          until tic() | toc() then Stop(h,t)
          else up (-. h) then Exhausted(t)
          else r() then Setting(h,t)
      | Stop(hi, ti) ->
          do active = true
          until rtic() | rtoc() then Move(hi,ti)
          else r() then Setting (h,t)
      | Exhausted(ti) ->
          do active = false
          until r() then Setting(h,ti)
      | Setting (hi, ti) ->
          do h = set hi
          and active = false
          until r() then Stop (h,t)
  init Move(h0, t0)


let node digitalwatch (hi,mi,si) = (h,m,s) where
  rec s = si fby (s+1) mod 60
  and m = mi -> (if ((s = 0) && (s <> 0 fby s)) then (pre m) + 1 else pre m) mod 60
  and h = hi -> (if ((m = 0) && (m <> 0 fby m)) then (pre h) + 1 else pre h) mod 24



(********** Simulation ************)

let hybrid keyboard () = go where
  rec init ok = false
  and s = period (0.04)
  and present s -> do ok = input () done
  and present s on ok -> do emit go = () done

let hybrid sampled_digitalwatch (tic, toc, active, hi,mi,si) = (h,m,s) where
  rec init s = si
  and init m = mi
  and init h = hi
  and present tic() on active | toc() on active ->
      (* do h,m,s = digitalwatch (h,m,s) done *)
      local h',m',s' in
      do
        h', m', s' = digitalwatch (h,m,s)
        and next h = h'
        and next m = m'
        and next s = s'
      done

let hybrid main () =
  let ok = period (0.04) in
  let theta = pendulum theta0 in
  let (tic, _, toc, _) = escapement theta in
  let r = keyboard () in
  let (h, t, active) = clockwatch (h0, 0.0, theta,r) in
  let thb = t *. (24. /. 30.) in
  let thl = thb /. 60. in

  let twb = t /. 3. in
  let twl = -.t *. (120. /. 20.) /. 3.  in

  let (hh,mm,ss) = sampled_digitalwatch(tic, toc, active, 0, 0, 1) in

  present ok -> draw_system (l, thetac, theta, h0, h, thb, thl, twb, twl, hh, mm, ss)
        | tic() on active -> play_tic ()
        | toc() on active  -> play_toc ();
    ()
