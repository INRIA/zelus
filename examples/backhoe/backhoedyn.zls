(** Model constants *)

let boom_rate   =  1.6
let stick_rate  = 10.0
let bucket_rate =  2.8
let leg_rate    = 32.0

(** Model components *)

let hybrid segment ((min, max, i), maxf, (push, pull, go))
 = ((segin, segout), angle) where

 rec der angle = v init i
 and error = v_r -. v
 and der v = (0.8 /. maxf) *. error +. 0.2 *. z init 0.0
             reset hit(v0) -> v0
 and der z = error init 0.0 reset hit(_) -> 0.0
 and v_r = if go then rate else 0.0
 and init segin = angle <= min
 and init segout = angle >= max

 and automaton
   | Stuck -> do
        rate = 0.0
      until push() on (angle < max) then
        do segin = false and segout = false in Pushing
      else  pull() on (angle > min) then
        do segin = false and segout = false in Pulling

   | Pushing -> local atlimit in
      do
        rate = maxf
        and atlimit = up(angle -. max)
      until atlimit on (last v > 0.1 *. maxf) then do
               emit hit = -0.3 *. last v in Pushing
      else (atlimit) then do segout = true and emit hit = 0.0 in Stuck
      else pull() then Pulling

   | Pulling -> local atlimit in
      do
        rate = -. maxf
        and atlimit = up(min -. angle)
      until atlimit on (last v < -0.1 *. maxf) then do
               emit hit = -0.3 *. last v in Pulling
      else  (atlimit) then do segin = true and emit hit = 0.0 in Stuck
      else  push() then Pushing

let hybrid legsegment ((min, max, i), rate, (extend, retract, stop)) =
  ((segin, segout), pos) where

  rec init pos = i
  and init segin  = pos <= min
  and init segout = pos >= max

  and automaton
    | Stationary ->
        do
          der pos = 0.0
        until extend() on (not segout)
          then do next segin = false in Extending
        else  retract() on (not segin)
          then do next segout = false in Retracting

    | Extending ->
        do
          der pos = rate
        until up(pos -. max)
          then do next segout = true in Stationary
        else  stop()         then Stationary
        else  retract()      then Retracting

    | Retracting ->
        do
          der pos = -. rate
        until up(min -. pos) then do next segin = true in Stationary
        else  stop()         then Stationary
        else  extend()       then Extending


(** Put the model together and link it to the GUI *)

open Backhoegui

let node buttons () = showsample ()

let hybrid model
  (boom_control, stick_control, bucket_control, leg_control, lamp_control) =

  let (boom_sensors, boom_ang)
      = segment (boom_range, boom_rate, boom_control)

  and (stick_sensors, stick_ang)
      = segment (stick_range, stick_rate, stick_control)

  and (bucket_sensors, bucket_ang)
      = segment (bucket_range, bucket_rate, bucket_control)

  and (leg_sensors, leg_pos)
      = legsegment (leg_range, leg_rate, leg_control)

  and refresh_rate = period (0.1) in

  let
  rec (alarm_lamp, done_lamp, cancel_lamp) = lamp_control
  and _ =
    present
    | refresh_rate ->
          showupdate (leg_pos, boom_ang, stick_ang, bucket_ang,
                               alarm_lamp, done_lamp, cancel_lamp)
  in
  (leg_sensors, boom_sensors, stick_sensors, bucket_sensors)

