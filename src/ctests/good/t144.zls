(* [output(0) = x0(0)]
  and [output(n) = output(n−1) + (k * t) * u(n−1)] *)
let node forward_euler(t)(k, x0, u) = output where
  rec output = x0 -> pre (output +. (k *. t) *. u)
      
(* [output(0) = x0(0)]
and [output(n) = output(n−1) + (k * t) * u(n)] *)
let node backward_euler(t)(k, x0, u) = output where
  rec output = x0 -> (pre output) +. (k *. t) *. u

let node filter(n)(h)(k, u) = udot where
  rec udot = n *. (k *. u -. f)
  and f = forward_euler(h)(n, 0.0, udot)

let node generic_filter(int)(n)(h)(k, u) = udot where
  rec udot = n *. (k *. u -. f)
  and f = run (int(h))(n, 0.0, udot)

let node filter_forward(h)(n)(k, u) =
  generic_filter(forward_euler)(h)(n)(k, u)

(* This program is not causal *)
(* let node filter_backward(h)(n)(k, u) =
  generic_filter(backward_euler)(h)(n)(k, u) *)

let node derivative(h)(k, u) = (u -. u fby u) /. h

let node pid_par(h)(n)(p, i, d, u) = c where
  rec c_p = p *. u
  and i_p = forward_euler(h)(i, 0.0, u)
  and c_d = filter(n)(h)(d, u)
  and c = c_p +. i_p +. c_d
	 
let node gpid(int)(filter)(h)(p, i, d, u) = c where
  rec c_p = p *. u
  and i_p = run (int h)(i, 0.0, u)
  and c_d = run (filter h)(d, u)
  and c = c_p +. i_p +. c_d

let node pid_forward_no_filter(h)(p, i, d, u) =
  gpid(forward_euler)(derivative)(h)(p, i, d, u)

let node pid_backward_no_filter(h)(p, i, d, u) =
  gpid(backward_euler)(derivative)(h)(p, i, d, u)

let hybrid gpid_c(int)(filter)(p, i, d, u) = c where
  rec c_p = p *. u
  and i_p = run int(i, 0.0, u)
  and c_d = run filter(d, u)
  and c = c_p +. i_p +. c_d

let hybrid int(k, x0, xprime) = x where
  rec der x = k *. xprime init x0

let hybrid gfilter(n)(int)(k, u) = udot where
   rec udot = n *. (u -. f)
   and f = run int (k, 0.0, udot)

let node filter1(n)(h)(k, u) = generic_filter(forward_euler)(n)(h)(k,u)
    
let hybrid pid_c(n)(p, i, d, u) =
  gpid_c(int)(gfilter(n)(int))(p, i, d, u)
      
(* some basic examples with fix-points overs streams *)
let node fix(f)(x) = o where
  rec o = run f (x, o)
	      
let node fix2(f)(g)(x) = o1, o2 where
  rec o1 = f(x, o2)
  and o2 = g(x, o1)

let node incr(x, y) = x -> pre y + 1
let node sum(x, y) = x + y
    
let node nat() = fix incr 0

(* one that is rejected *)
(* let node wrong() = fix sum 0 *)

let node main() =
  let o = nat () in
  print_int o; print_newline ()

let h = 0.1
    
(* double integration *)
let node int2(x0, xprime) = x where
  rec x = x0 -> pre (x +. xprime *. h)

let node sin_cos() =
  let rec si = int2(0.0, co)
  and co = int2(1.0, -. si) in
  si, co
    
let node double(f)(g)(x) =
  let rec z = run f (x,t)
  and t = run g (x, z) in
  z, t

let node plus(x,y) = x + y
    
let node double_incr(x) = double(incr)(plus)(x)
    
