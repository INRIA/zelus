let f = node x -> x + pre x

let x = (+)

let f0 x = x + 1

(* let node f1(x) returns (o)
  do o = 0 -> pre(o+1) + x done

let f3 (x, y) = x +. y

let f4 x = f3 x
(*
let node f23(x) = o where rec o = 0.0 -> pre(f3(1.0, 2.0)) *)

let hybrid f22(x) = o where rec der o = f3 (1.0, 2.0) init x

let hybrid f2(x) returns (o)
  do der o = f3 (1.0, o) init x done *)

(*

let node f1 () returns (o)
  if true then o = 1 else o = 2

let hybrid f11 (z) returns (o)
    der o = 1.0 init 0.0 reset z -> 2.0
	
let node f2 () returns (o)
  o = f1() + f1()
  
let node f3 () returns (o)
  automaton
  | A -> do o = 1 until true then B
  | B -> do o = f2 () until false then A
  init
    if true then B else A
  end
*)
