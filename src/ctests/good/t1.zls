let node main__() = o where
  rec automaton
      | S1 -> let rec cpt = 0 -> pre cpt + 1 in
              do o = cpt + 1 until (cpt = 42) then S2
      | S2 -> let rec cpt = 0 -> pre cpt + 1 in
              do o = cpt + -1 done
      end
type t2 = int

let ff(x:t2) = 1 + x

let hybrid f (x) =
  let rec der m = 1.0 init 0.0 in
  let rec der k = 2.0 +. k init 3.0 in
  m +. x +. 1.0 +. k

let i1 j = k where
  match true with
  | true -> match true with
            | true -> do emit k = () done
	    | false -> do done
            end
  | false -> do done


let hybrid g(x) =
  let rec der m = 1.0 +. 2.0 init 0.0 
  and der z = m init 1.0 and k = z and l = up(m) in
  m

let hybrid h(x, y) =
  let z = x+1 in
  let t = y+1 in
  z, t

  
    
let hybrid main () =
  let _ = f(3.0)
  and _ = g(4.0) in
  let _ = f(3.0)
  and _ = g(4.0) in
  let _ = f(3.0)
  and _ = g(4.0) in
  let _ = f(3.0)
  and _ = g(4.0) in
  ()

let main2 x = let z = x + 2 in z
