(include_subdirs unqualified)

(rule
 (copy %{project_root}/config.ml config.ml))

(subdir parsing
  (ocamllex lexer))

(subdir parsing
  (menhir (modules parser) (infer true) (flags --explain --table)
  ))

; all the modules necessary to parse
(library
  (name parser_lib)
  (public_name zelus.parser_lib)
  (wrapped false)
  (modules
    location ; position in the source file
    lexer parser parsetree ; parsing
  )
  (libraries menhirLib))

; all the modules necessary for building the ast after parsing
(library
  (name global_lib)
  (public_name zelus.global_lib)
  (wrapped false)
  (modules
    config misc ; general configuration and common global variables
    ident ; idents
    lident ; long idents
    defnames ; defined names by an equation
    util ; useful functions
    zelus ; the ast
    write ; computes defined variables for equations
    scoping ; associate unique names
    pp_tools ; pretty printer tools
    printer ; printer for the ast
    noinfo ; no information to be attached to patterns, expressions and eqs.
  )
  (libraries zelus.parser_lib))

;; the ZRun interpreter
; all the necessary modules to make zrun except the entry modules
(library
  (name zrun_lib)
  (public_name zelus.zrun_lib)
  (wrapped false)
  (modules
    error ; error messages
    value ; the type of values
    genv ; the type of a global environment
    debug ; all the information for debuging
    primitives ; the value of primitives
    find ; find the current value and the last value of a variable
    match ; the evaluation of pattern matching
    arrays ; representing an array value
    records ; reprenting a record
    fix ; a bounded fix-point
    monad ; useful monad to deal with errors
    coiteration ; the main execution loop
    output ; printing
    forloop ; evaluation functions for for loops
    eval ; evaluation of an expression
  )   	 
  (libraries zelus.parser_lib zelus.global_lib))

 ;; the Zelus compiler
 ; type definition and global info in the global type environment
 (library
  (name typdefs_lib)
  (public_name zelus.typdefs_lib)
  (wrapped false)
  (modules
    genames ; generate fresh names
    deftypes ; definition of types
    defcaus ; definition of causality types
    definit ; definition of initialisation types
    initial ; definition of general types, values
    ptypes ; printing types
    pcaus ; printing causality types
    pinit ; printing initialization types
    typinfo ; type annotation for Zelus terms
    global ; definition of entries in the global type environment
    modules ; global symbol table for typing
  )
  (libraries zelus.global_lib)
)

(library
  (name common_lib)
  (public_name zelus.common_lib)
  (wrapped false)
  (modules
    graph ; acyclic graph manipulation
    parseq ; a data-structure to represent
           ; parallel and sequential composition
    aux ; auxiliary functions for building terms
  )
  (libraries zelus.global_lib zelus.typdefs_lib)
)
    
; typing
 (library
  (name typing_lib)
  (public_name zelus.typing_lib)
  (wrapped false)
  (modules
    types ; type manipulation and unification between types
    interface ; interface
    kind ; kinds
    total ; check totatlity of pattern matching
    patternsig ; check totality of pattern matching
    matching ; check totality of pattern matching
    typerrors ; type errors;
    typing ; the main typing functions
    )
  (libraries zelus.global_lib zelus.typdefs_lib)
)

; causality analysis
 (library
  (name causality_lib)
  (public_name zelus.causality_lib)
  (wrapped false)
  (modules
    causal ; type manipulation and unification between types for causality
    causality ; causality inference
    )
  (libraries zelus.global_lib zelus.typdefs_lib zelus.common_lib
   zelus.typing_lib)
)

; initialisation analysis
 (library
  (name initialization_lib)
  (public_name zelus.initialization_lib)
  (wrapped false)
  (modules
    init ;  type manipulation and unification between types for initialisation
    initialization ; initialization inference
    )
  (libraries zelus.global_lib zelus.typdefs_lib zelus.common_lib
   zelus.typing_lib)
)

; rewriting steps
 (library
  (name rewrite_lib)
  (public_name zelus.rewrite_lib)
  (wrapped false)
  (modules
    cost ; a cost function used to decide which function call to inline
    unsafe ; is an expression/equation unsafe
    mapfold ; generic mapfold
    markfunctions ; mark function calls to be inlined
    static ; static reduction
    inline ; inlining of function calls
    automata ; rewrite automata into match/reset
    present ; rewrite present into match
    lastinpatterns ; remove last in patterns
    copylast ; add copies [lx = last*x] for [last x] when [x] is local
             ; all variables in patterns must be value (remove last)
    der ; remove the initialization and reset part of a derivative equation
    exp2eq ; translate match and reset expressions into their equational form
    returns ; rewrite [returns (p) eq]
    complete ; complete equations with [der x = 0.0]
    default ; translate blocks into let/rec (propagate
            ; the default and initialisation values)
    pre ; rewrite fby/fby into (init/last)
    period ; translate periods into horizons
    encore ; add horizons [horizon h = 0.0] for zero-crossings
    disc ; compile the operation disc with an horizon
    reset ; rewrite -> and resets
    shared ; normalise equations to shared variables into [x = ...]
    letin ; un-nesting of let/in and blocks
    aform ; A-normal form
    ; zopt ; sharing of zero-crossings
    copy ; remove of copy variables
    ; cse ; common sub-expression elimination
    vars ; read variables
    deadcode ; deadcode removal
    dependences ; data-dependences between equations
    control ; fusion of control dependences
    schedule ; static scheduling
    rewrite ; compose rewriting steps
  )
  (libraries zelus.global_lib zelus.typdefs_lib zelus.common_lib
   zelus.causality_lib zelus.zrun_lib)
)

;sequential code generation
 (library
  (name seqcode_lib)
  (public_name zelus.seqcode_lib)
  (wrapped false)
  (modules
    obc; the AST for representing Mealy machines
    oaux; auxiliary functions for building terms
    oprinter; the printer
    ocamlprinter; print OCaml code
    translate; translate into sequential code
  )
  (libraries zelus.global_lib zelus.typdefs_lib
   zelus.common_lib zelus.typing_lib)
)

; The compiler
(executable
 (name zeluc)
  (modes (byte exe))
  (modules
	compiler; the compiler
	simulator; the generation of the main function
	zeluc; the main function
  )
  (libraries unix zelus.parser_lib zelus.global_lib zelus.zrun_lib
  zelus.typing_lib zelus.causality_lib zelus.initialization_lib
  zelus.rewrite_lib zelus.seqcode_lib)
  (preprocess (pps ppx_deriving.show))
  (promote (until-clean) (into ..)))

(install
 (package zelus)
 (section bin)
 (files (zelus.exe as zelus)))
