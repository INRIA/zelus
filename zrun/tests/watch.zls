(* Adapted by MP to the syntax of Zelus - 2020 *)
(*
-- This is  a program implementing a digital watch, with alarm and stopwatch, 
-- as specified in the document "ESTEREL Programming Examples: Programming a 
-- digital watch in ESTEREL V2.1" by G. Berry.  Here is the LUSTRE program. 
-- The external functions, written in C, have been mainly borrowed from the 
-- ESTEREL implementation.  They will be given later on.
*)

type wATCH_TIME_TYPE
type wATCH_TIME_POSITION
type sTOPWATCH_TIME_TYPE
type aLARM_TIME_TYPE
type aLARM_TIME_POSITION
type dISPLAY_POSITION
type mAIN_DISPLAY_TYPE
type mINI_DISPLAY_TYPE
type sTATUS_TYPE
type dISPLAY_TYPE
type string
type lABELS_TYPE

-- EXTERNAL CONSTANTS 

const
	INITIAL_WATCH_TIME : WATCH_TIME_TYPE;
	INITIAL_STOPWATCH_TIME : STOPWATCH_TIME_TYPE;
	INITIAL_ALARM_TIME: ALARM_TIME_TYPE;
	NULL_POSITION: DISPLAY_POSITION;
	INITIAL_WATCH_POSITION : WATCH_TIME_POSITION;
	INITIAL_ALARM_POSITION : ALARM_TIME_POSITION;
	ALARM_DURATION : int;
	stringST : string; -- the string "ST"
	stringAL : string; -- the string "AL"


-- EXTERNAL FUNCTIONS

function COMPARE_WATCH_ALARM_TIME (watch_time: WATCH_TIME_TYPE;
				   alarm_time: ALARM_TIME_TYPE)
		returns (result: bool);
-- returns true iff "watch_time" and "alarm_time" are equal

function INCREMENT_WATCH_TIME (time: WATCH_TIME_TYPE) 
		returns (newtime: WATCH_TIME_TYPE);
-- returns "new_time" = "time" + 1 second

function TOGGLE_24H_IN_WATCH_MODE (time: WATCH_TIME_TYPE) 
		returns (newtime: WATCH_TIME_TYPE);
-- changes the 24H/AM-PM status of "time"

function INCREMENT_WATCH_TIME_IN_SET_MODE 
	(time: WATCH_TIME_TYPE; position: WATCH_TIME_POSITION) 
		returns (new_time: WATCH_TIME_TYPE);
-- returns "new_time" = "time" + 1 second, with particular restrictions due
-- to the set mode

function SET_WATCH_TIME
	(time: WATCH_TIME_TYPE; position: WATCH_TIME_POSITION) 
		returns (new_time: WATCH_TIME_TYPE);
-- increment the field pointed by "position" in "time"

function CONFIRM_TIME (time: WATCH_TIME_TYPE) 
		returns (new_time: WATCH_TIME_TYPE);
-- after a manual setting of the watch time, checks it for inconsistencies
-- of the calendar

function NEXT_WATCH_TIME_POSITION
	(position: WATCH_TIME_POSITION) 
		returns (new_position: WATCH_TIME_POSITION);
-- returns the next position after "position"

function INCREMENT_STOPWATCH_TIME (time: STOPWATCH_TIME_TYPE) 
		returns (newtime: STOPWATCH_TIME_TYPE);
-- returns "new_time" = "time" + 1 time unit (1/100 sec.)

function TOGGLE_24H_IN_ALARM_MODE (time: ALARM_TIME_TYPE) 
		returns (newtime: ALARM_TIME_TYPE);
-- changes the 24H/AM-PM status of "time"

function SET_ALARM_TIME 
	(time: ALARM_TIME_TYPE; position: ALARM_TIME_POSITION) 
		returns (new_time: ALARM_TIME_TYPE);
-- increment the field pointed by "position" in "time"

function NEXT_ALARM_TIME_POSITION 
	(position: ALARM_TIME_POSITION) 
		returns (new_position: ALARM_TIME_POSITION);
-- returns the next position after "position"

function IS_O_CLOCK (time: WATCH_TIME_TYPE) returns (is_o_clock: bool);
-- returns true if "time" is on the hour (used for chime)

function IS_ZERO_MOD_10_MN (time: STOPWATCH_TIME_TYPE) returns (is_zero: bool);
-- returns true  if "time" is a multiple of 10 minutes (used for stopwatch beep)

function WATCH_TIME_TO_MAIN_DISPLAY
	(time: WATCH_TIME_TYPE) returns (display: MAIN_DISPLAY_TYPE);
-- translation of "time" to the main display format

function WATCH_TIME_TO_MINI_DISPLAY
	(time: WATCH_TIME_TYPE) returns (display: MINI_DISPLAY_TYPE);
-- translation of "time" to the mini display format
-- (used in ALARM and STOPWATCH modes)

function WATCH_DATE_TO_MINI_DISPLAY (time: WATCH_TIME_TYPE)
         returns (display:MINI_DISPLAY_TYPE);
-- translation of the date in "time" to the mini display format

function WATCH_DAY_TO_ALPHA_DISPLAY
	(time: WATCH_TIME_TYPE) returns (display: string);
-- translation of the day of the week in "time" to the alphabetic display format 

function WATCH_TO_DISPLAY_POS
        (wpos: WATCH_TIME_POSITION) returns (dpos: DISPLAY_POSITION);
-- translation of a watch position to the display format 
-- (generally nothing to do)

function ALARM_TO_DISPLAY_POS
        (apos: ALARM_TIME_POSITION) returns (dpos: DISPLAY_POSITION);
-- translation of an alarm position to the display format 
-- (generally nothing to do)

function STOPWATCH_TIME_TO_MAIN_DISPLAY
	(time: STOPWATCH_TIME_TYPE) 
		returns (display: MAIN_DISPLAY_TYPE);
-- translation of "time" to the main display format

function ALARM_TIME_TO_MAIN_DISPLAY 
	(time: ALARM_TIME_TYPE) returns (display: MAIN_DISPLAY_TYPE);
-- translation of "time" to the main display format

function MAKE_DISPLAY
		(main: MAIN_DISPLAY_TYPE;
		mini: MINI_DISPLAY_TYPE;
		alpha: string;
		status: STATUS_TYPE;
		enhanced: DISPLAY_POSITION;
		labels: LABELS_TYPE) returns (display: DISPLAY_TYPE);

function STATUS
	(alarm_is_set, chime_is_set,
	stopwatch_running, stopwatch_lapping: bool)returns
	(status: STATUS_TYPE);

function LABELS
	(mode_is_watch, mode_is_stopwatch, mode_is_alarm,
	 mode_is_set_watch, mode_is_set_alarm:bool)
	returns (labels: LABELS_TYPE);

let node eWATCH
    (second,
     (* -- second
 	-- the alarm begins to ring when it is set 
	and the alarm time
	-- equals the watch time *)
   toggle_24h,
   (* -- toggle the 24h/AM-PM mode
      toggle_chime,*)
   in_set,
   (* -- is the watch in set mode *)
   next_position, (* -- change the position set in set mode *)
   set (* -- increment the position to be set*))
   returns 
   (time, (* : WATCH_TIME_TYPE; -- the time *)
   enhance, (* : WATCH_TIME_POSITION; -- the position to be enhanced *)
   chime_is_set,
   beep)
(*	
-- the watch has a mode (standard or set), it receives the second, 
   -- and has three buttons: a button to change the 24H/AM-PM status,
   -- a button to change the position to be enhanced and manually set, 
   -- and a button to set (generally increment) this position *)
local
   position_set, (* : WATCH_TIME_POSITION; -- the position to be set *)
   internal_chime_is_set (* : int; --TRICHE (pour faire comme esterel) *)
do
  internal_chime_is_set = 
   0 -> if (toggle_chime) then
   (if (pre (internal_chime_is_set)) = 0 then 1 else 0) 
   else pre(internal_chime_is_set)
and
 (* -- (ancienne definition :)
    -- chime_is_set = TWO_STATES(false, toggle_chime, toggle_chime); *)
   chime_is_set = (internal_chime_is_set = 1)
and
  beep = if second then
         (if (iS_O_CLOCK(time) and (chime_is_set)) then 2 else 0)
   else 0
and
  time = iNITIAL_WATCH_TIME ->
             if not in_set then
		(* -- in standard watch mode, the time is incremented at any
		-- second, and the 24H/AM-PM status is changed on the
		-- event "toggle_24h. When returning from a manual setting,
		-- the time must be checked for inconsistencies. *)
                if second then iNCREMENT_WATCH_TIME(pre(time))
                else if toggle_24h then tOGGLE_24H_IN_WATCH_MODE(pre(time))
		else if eDGE(not in_set) then cONFIRM_TIME(pre(time))
                else pre(time)
             else
		(* -- in set watch mode, a special procedure is applied to
		-- increment the time. Moreover, the time is changed 
		-- manually by any "set" command *)
             if second
             then iNCREMENT_WATCH_TIME_IN_SET_MODE(pre(time), position_set)
             else if set then sET_WATCH_TIME(pre(time), position_set)
             else (pre(time))
and
	(* -- the position to be enhanced and set is initialized whenever
	-- the set watch mode is entered, and changed manually by any
	-- "next position" command *)
  enhance = position_set
and
  position_set = if true -> eDGE(in_set) then iNITIAL_WATCH_POSITION
                 else if next_position
                 then nEXT_WATCH_TIME_POSITION(pre(position_set))
		 else pre(position_set);
done

let node eSTOPWATCH
   (hs,
   (* -- the 1/100 second, or more generally, the time unit *)
   start_stop,lap)
   returns
   (time, (* :STOPWATCH_TIME_TYPE; -- the time to be displayed *)
   run_state, (* -- true if the stop-watch is running *)
   lap_state, (* -- true if the display is frozen *)
   beep)
(*
-- the stopwatch has two buttons: the start-stop button, and the lap-reset 
-- button. It outputs the stopwatch time, the components of its state,
-- and its own beeper command since it depends on the stopwatch internal time.
 *)
local res, must_beep, (* -- true if the time is reset *)
    internal_time (* : STOPWATCH_TIME_TYPE; *)
do
 (* -- the lap-reset button is interpreted as a "reset" when the stopwatch
    -- is neither in lap state not in run state *)
   res = false -> lap && pre(not run_state && not lap_state)
and
 (*	-- the stopwatch is initially stopped. Its start-stop state changes
	-- whenever the start-stop button is pushed *)
   run_state = tWO_STATES(false,start_stop,start_stop)
and
 (*	-- the stopwatch is initially not in lap state. This state is entered
	-- whenever the lap button is pushed in run state, and leaved as soon
	-- as this button is pushed again *)
   lap_state = tWO_STATES(false,lap && run_state, lap)
and
(*	-- the stopwatch displayed time is always equal to the value of the
	-- internal time at the last instant when the stopwatch was not in
	-- lap state *)
   time = current (internal_time when not lap_state)
and
   internal_time =
     if true -> res then iNITIAL_STOPWATCH_TIME
                else if run_state && hs
                then iNCREMENT_STOPWATCH_TIME(pre(internal_time))
                else pre(internal_time)
(*
	-- the stopwatch must beep whenever the start-stop button is pushed
	-- and whenever the internal time reaches a multiple of 10mn (actually
	-- 1mn, for simulation purpose
-- must_beep = start_stop or (IS_ZERO_MOD_10_MN(internal_time) and run_state);
-- beep = if EDGE(must_beep) then 1 else 0;
 *)
and
   must_beep = if start_stop then true
               else if (hs and run_state) then iS_ZERO_MOD_10_MN(internal_time)
   else false
and
   beep = if must_beep then 1 else 0
done

let node EALARM
   (toggle_24h, (* --change the 24h or AM/PM mode  *)
   toggle_alarm, (* --change the status "alarm set" *)
   in_set, (* --  true when the mode is "Set Alarm" *)
   set, (* --increment the position set in set mode *)
   next_position, (* --change the position set *)
   stop_beep, 
   second,
   watch_time)
   returns (time, (* : ALARM_TIME_TYPE; -- the alarm time *)
            status, (* :bool; -- alarm set *)
            enhance, (* ALARM_TIME_POSITION; -- the position to be enhanced *)
            beep) (* -- the alarm has a mode (standard or set),
-- and four buttons: a button to change the 24H/AM-PM status,
-- a button to set or reset the alarm,
-- a button to change the position to be enhanced and manually set, 
-- and a button to set (generally increment) this position *)
local position_set,
    start_beeping,
    time_out,
    count, internal_status
   do
   (*
	-- the 24H/AM-PM component of the time is changed by any "toggle_24h"
	-- command. Otherwis, the alarm time is only changed by the 
	-- "set" command *)

     start_beeping = cOMPARE_WATCH_ALARM_TIME(watch_time,time) && status
   and
     status = (internal_status = 1)
   and
     internal_status =
     0 -> if toggle_alarm then 
             (if ((pre internal_status) = 0) then 1 else 0)
          else if(eDGE(not in_set) && ((pre internal_status) = 0)) then 1
               else pre internal_status
   and
     count = 0 -> if(start_beeping) then ALARM_DURATION
             else if (((pre count)<>0) && (second)) then pre count - 1
             else (0 -> pre count);
   and
     time_out = false -> (pre count <> 0) && (count = 0)
   and
     beep = if (tWO_STATES(false,start_beeping,stop_beep or time_out)
                 && second)
            then 4
            else 0
   and
     time = iNITIAL_ALARM_TIME ->
              if toggle_24h  then tOGGLE_24H_IN_ALARM_MODE(pre(time))
              else if set then sET_ALARM_TIME(pre(time), position_set)
              else pre(time);
   (*
	-- the position to be enhanced and set is initialized whenever
	-- the set alarm mode is entered, and changed manually by any
	-- "next position" command
    *)
   and
      enhance =  position_set
   and
      position_set =
        if true -> eDGE(in_set) then iNITIAL_ALARM_POSITION
        else if next_position then nEXT_ALARM_TIME_POSITION(pre(position_set))
	     else pre(position_set)
   (* -- the alarm is initially not set. It is automatically set when leaving
      -- the set mode. Otherwise, its status is changed manually by any 
      -- toggle_alarm command *)
done

(*
-- BUTTONS computes the various modes and switches required by the
-- main functions of the wristwatch.  The four inputs are the four
-- buttons actually found on the wristwatch.
 *)
   
let node bUTTONS (UL,LL,UR,LR)
     returns (mode_is_watch, (*		-- the display shows the watch *)
	      mode_is_stopwatch, (*	-- the display shows the stopwatch *)
	      mode_is_alarm, (*		-- the display shows the alarm *)
              mode_is_set_watch, (*	-- the watch is in set mode *)
	      mode_is_set_alarm, (*	-- the alarm is in set mode *)

              toggle_24h, (*	-- the status '24H/AM-PM' must change *)
	      toggle_chime, (*	-- the status of the chime must change *)
	      toggle_alarm, (*	-- the status of the alarm must change *)

              next_watch_time_position, (*-- the position in the watch
                                        -- which can be set must change *)
	      next_alarm_position,	(* -- the position in the alarm time
                                  	-- which can be set must change *)
              set_watch,		(* -- the current position of 
					-- the watch must be set *)
	      set_alarm,		(* -- the current position of 
					-- the alarm time must be set *)

              start_stop,	(* -- the start-stop event of the stopwatch *)
	      lap,		(* -- the lap-reset event of the stopwatch *)

	      stop_alarm_beep) (*	-- the manual stop of the alarm beep *)
local
    mode_is_standard_watch,
    mode_is_standard_alarm
do
  mode_is_watch =
  true ->
	 if LL then
	    if pre mode_is_watch then pre mode_is_set_watch 
	    else if pre mode_is_stopwatch then false
	    else not (pre mode_is_set_alarm) 
         else pre mode_is_watch
and
  mode_is_stopwatch = 
  false ->
	 if LL then
	    if pre mode_is_watch then not (pre mode_is_set_watch) else false
	 else pre mode_is_stopwatch
and
  mode_is_alarm = 
  false ->
	 if LL then
	    if pre mode_is_watch then false
	    else if pre mode_is_stopwatch then true
	    else pre mode_is_set_alarm 
	 else pre mode_is_alarm
and
  mode_is_set_watch = if mode_is_watch then
			if UL then (false -> not (pre mode_is_set_watch))
			else (false -> pre mode_is_set_watch)
		      else false
and
   mode_is_set_alarm = if mode_is_alarm then
			if UL then not (pre mode_is_set_alarm)
			else pre mode_is_set_alarm
		        else false
and
   mode_is_standard_watch = mode_is_watch && not mode_is_set_watch
and
   mode_is_standard_alarm = mode_is_alarm && not mode_is_set_alarm
and
  toggle_24h = LR && mode_is_standard_watch
and
  toggle_chime = LR && mode_is_standard_alarm
and
  toggle_alarm = UR && mode_is_standard_alarm
and
  next_watch_time_position = LL && mode_is_set_watch
and
  next_alarm_position = LL && mode_is_set_alarm
and
  set_watch = LR && mode_is_set_watch
and
  set_alarm = LR && mode_is_set_alarm
and
  start_stop = LR && mode_is_stopwatch
and
  lap = UR && mode_is_stopwatch
and
  (*  -- in any mode, the UR button stops the alarm beep *)
  stop_alarm_beep = UR;
done
   
let node dISPLAY(mode_is_watch, mode_is_stopwatch, mode_is_alarm,
      watch_time,
      stopwatch_time,
      alarm_time, 
      position_enhanced,
      status,
      labels)
   returns
      (display)
local main_display,
    mini_display,
    alpha_display
do
  display = mAKE_DISPLAY(main_display,mini_display,
			alpha_display, status, 
                        position_enhanced,labels)
and 
  (main_display,mini_display,alpha_display) =
    if mode_is_watch then
	(* -- in watch mode, the main display shows the watch time, the mini
	-- display shows the date, and the alphabetic display shows the
	-- day of the week *)
       (wATCH_TIME_TO_MAIN_DISPLAY(watch_time),
        wATCH_DATE_TO_MINI_DISPLAY(watch_time),
        wATCH_DAY_TO_ALPHA_DISPLAY(watch_time))
    else if mode_is_stopwatch then
	(* -- in stopwatch mode, the main display shows the stopwatch time,
	-- the minidisplay shows the watch time, and the string 'ST' is 
	-- displayed on the alphabetic display *)
       (sTOPWATCH_TIME_TO_MAIN_DISPLAY(stopwatch_time),
        wATCH_TIME_TO_MINI_DISPLAY(watch_time),
	stringST)
    else
	(* -- in alarm mode, the main display shows the alarm time,
	-- the minidisplay shows the watch time, and the string 'AL' is 
	-- displayed on the alphabetic display *)
       (aLARM_TIME_TO_MAIN_DISPLAY(alarm_time),
        wATCH_TIME_TO_MINI_DISPLAY(watch_time),
	stringAL)
done
   
let node tWO_STATES(init,set,res) returns (state)
(*
-- implements a flip-flop, with initial state "init". The state changes from 
-- 'false' to 'true' whenever the input "set" is true, and from 'true' to 
-- 'false' -- whenever the input "reset" is true. 
-- These two inputs are not exclusive. *)
do
  state = init ->
               if set && not (pre state) then true
               else if res and pre state then false
               else pre state;
done

let node eDGE(b) returns (edge)
(* -- returns 'true' whenever the value of its parameter rises to 'true' *)
do edge = b -> (b && not (pre b) done

let node dIVIDE (scale) returns (quotient);
(* -- the result is true once every "scale" cycles of the node *)
local n
do
   (n,quotient) = (0,true)  -> (if (pre(n) + 1)  = scale then (0,true) 
                                else (pre(n)+1,false))
done

let node new_Watch (UL,LL,UR,LR,time_unit)
   returns (display, beep)
local
  watch_time,
  watch_position_enhanced,
  alarm_time,
  alarm_position_enhanced,
  stopwatch_time,
  position_enhanced,
  status,
  labels,
  alarm_is_set, mode_is_watch, mode_is_stopwatch, mode_is_alarm,
  stopwatch_running, stopwatch_lapping, chime_is_set,
  toggle_24h, toggle_chime, toggle_alarm, watch_next_position,
  alarm_next_position, set_watch, set_alarm, mode_is_set_watch,
  mode_is_set_alarm, start_stop, lap, stop_alarm_beep, second,
  alarm_beep, chime_beep, stopwatch_beep
do
   assert #(UL,LL,UR,LR,time_unit)
and
   display = dISPLAY(mode_is_watch,mode_is_stopwatch,mode_is_alarm,
			watch_time,stopwatch_time, alarm_time, 
   position_enhanced,status,labels)
   (*
     -- builds the display
    *)
and
  beep = alarm_beep + chime_beep + stopwatch_beep
and
  (alarm_time,alarm_is_set,alarm_position_enhanced,alarm_beep) =
          eALARM(toggle_24h,toggle_alarm,mode_is_set_alarm,
                 set_alarm,alarm_next_position,
                 stop_alarm_beep,second,watch_time);
and
  labels =  (*   -- the button labels *)
	lABELS(mode_is_watch,mode_is_stopwatch,
	       mode_is_alarm, mode_is_set_watch, mode_is_set_alarm)
and
  position_enhanced =  (* -- the position to be enhanced *)
     if mode_is_set_watch then wATCH_TO_DISPLAY_POS(watch_position_enhanced)
     else if mode_is_set_alarm then aLARM_TO_DISPLAY_POS(alarm_position_enhanced)
     else NULL_POSITION;
and
  status =   	-- the status indicators appearing on the screen
        STATUS(alarm_is_set, chime_is_set, 
	stopwatch_running, stopwatch_lapping)
and
  (watch_time, watch_position_enhanced,chime_is_set,chime_beep) =
          EWATCH(second,toggle_24h,toggle_chime,mode_is_set_watch,
                          watch_next_position,set_watch)
and
  (stopwatch_time, stopwatch_running, stopwatch_lapping, stopwatch_beep) =
          ESTOPWATCH(time_unit, start_stop,lap)
and
  (mode_is_watch, mode_is_stopwatch, mode_is_alarm,
   mode_is_set_watch, mode_is_set_alarm,
   toggle_24h, toggle_chime, toggle_alarm,
   watch_next_position, alarm_next_position,
   set_watch, set_alarm,
   start_stop, lap, stop_alarm_beep) = bUTTONS(UL,LL,UR,LR)
and
   second = time_unit && (current(DIVIDE(10 when (true->time_unit))))
(*
		-- converts the time unit (assumed to be the 1/10
		-- sec.) into the second
*)
done

