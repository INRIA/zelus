let node m1() returns (o)
  let r = 1 + 2 in
  let m = r + 2 in
  do o = 42 done

let node make(n)() = foreach(n) i in 0 to n-1 do i done

let node f x = x.(4 .. 5)

let node main0 () =
  let t = run (make(10))() in
  let v = f t in
  assert (v = [| 4; 5 |])
  
let node f () =
  forward(10) i in 0 to 9 returns (o init 0)
    do o = 0 -> pre o + i done

let node main1 () =
  let v = f () in
  v
    
let node f x =
  forward(4) returns (o default 0)
    do o = 0 -> (pre o + 1) done

let node main2 () =
  let v = f () in
  v

let node f x =
  forward(10) xi in x returns (o default 0)
    do o = (0 fby o) + xi done 

let node main3 () =
  let t = run (make(10))() in
  f t

let node f x = foreach(4) do x done

let node ff x =
  foreach(4) xi in x returns ([|cpti init 0|], [|mi|])
  local s do
    cpti = last cpti + x
  and
    mi = cpti + s
  and
    s = 0 fby mi + 1
  done

let node ff x = m where rec
  foreach(4) xi in x, m init 0 do
    foreach(4) xij in xi, m init last m do
      m = last m + xij
    done
  done

let node g x =
  let rec o =
    forward(4) do 
      let rec cpt = (0 fby cpt) + lo in
      cpt
    done
  and lo = 1 fby o in
  o

let node main4 () = g [| 1; 2; 3 |]

let node sum(xi, yi) = cpt where
  rec cpt = (0 fby cpt) + xi * yi

let node scalar (x, y) =
  forward(4) xi in x, yi in y do sum(xi, yi) done
   
let node main () =
  scalar (foreach(4) do 2 done, foreach(4) do 2 done)

let node plus1 x =
  foreach(4) xi in x do xi + 1 done

let node plus (x, y) =
  foreach(4) xi in x, yi in y do xi+yi done

let node plus11 x =
  foreach(4) xi in x do
    let rec cpt = xi fby cpt + 1 in cpt
  done

let node copy x =
  foreach(4) xi in x do
    let rec cpt = (0 fby cpt) + xi in
    cpt
  done
  
let node main5 () =
  plus (plus1 (f 0), plus1 (f 1))

let node main6 () =
  plus1 (copy (f 1))

let node main7() =
  plus11 (f 0)

let node main8 () =
  let x = f 0 in
  x.(0) default 42

(* sequential search in a array *)
let node find0 (x, a) returns (index, found)
  (index, found) =
    forward(5) i in 0 to 4, ai in a returns (index init 0, c init false)
      while not (last c) do index = i and c = (ai = x) done

let node main9 () =
  let v = find0 (3, [| 0; 1; 2; 3; 4 |]) in
  assert (v = (3, true))

let node find1 (x, a) returns (index, found)
  forward i in 0 to length a - 1, ai in a, index init 0, found init false
     while not (last found) do index = i and found = (ai = x) done

let node main10 () =
  let v = find1 (3, [| 0; 1; 2; 3; 4 |]) in
  assert (v = (3, true))


let node fill_up0 (max_i) returns (s)
    s = forward(5) i in 0 to 4 returns ([|a init 0|])
           while i < max_i do a = i done

let node main11 () =
    let v = fill_up0 (2) in
  assert (v = [|0;1;1;1;1|])

let node fill_up1 (max_i) returns (s)
    forward(5) i in 0 to 4, si init 0 out s
           while i < max_i do si = i done

let node main12 () =
  let v = fill_up1 (2) in
  assert (v = [|0;1;1;1;1|])


let node scalar_10 (x, y) returns (o)
    forward(10) xi in x, yi in y, o init 0
      do o = last o + xi * yi done

let node scalar_n n (x, y) returns (o)
    forward(n) xi in x, yi in y, o init 0
      do o = last o + xi * yi done

let node main13 () =
  let v1 = foreach(10) i in 0 to 9 do i done in
  let v2 = foreach(10) i in 0 to 9 do i done in
  let v = run (scalar_n (10)) (v1, v2) in
  assert (v = scalar_10 (v1, v2))
