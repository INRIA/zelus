(* scalar product in equational form *)
(*
let node scalar2_eq (x, y) = m where
  rec forward(4) i in 0 to 3, m init 0
        do m = last m + x.(i) * y.(i) done
*)

let node sum_eq2 (x) returns (m)
  forward(4) m init 0
    do m = last m + 1 done

let node main1() =
  let v = [|1; 2; 3; 4|] in
  assert (sum_eq2 v = 10)

    (*
let node sum_eq (x) = m where
  rec forward(4) i in 0 to 3, m init 0
    do m = last m + x.(i) done

(* sum of the elements of a two dimension array - equational form *)
let node sum_eq m returns (o')
    forward(3) mi in m, o' init 0 do
      forward(4) mij in mi, o' init last o'
         do o' = last o' + mij done
      done

let node main2() =
  let m = [| [|1; 2; 3; 4|];
	     [|5; 6; 7; 8 |];
	     [|9; 10; 11; 12|] |] in
  sum_eq m

let node f a b = r where rec
  forward(4) i in 0 to 3, ai in a, ri out r do
     forward(5) j in 0 to 4, rij out ri do
      forward(6) k in 0 to 5, bk in b, rij init 0 do
        rij = last rij + ai.(k) * bk.(j)
      done
     done
  done
*)
    
(*let f{a,b,c}(x, y, z) =
    forall{a} xi in x do xi + 1 done,
    forall{b} yi in y do yi + 1 done,
    forall{c} zi in z do zi + 1 done

val f : 'a 'b 'c . int['a] * int['b] * int['c]*)
