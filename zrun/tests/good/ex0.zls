let g = 42

let node f(x, y) returns (o)
  local z
  do o = x + y
  and z = z + 1
  done

let node g(x, y) returns (o)
  o = let rec z = z + 1 and o = x + y in o

let node main() returns (m)
  m = f(1, 2)
(*
let node h() returns (y)
  do y = f(0 fby y) done

let node main() returns (o)
  do o = h () done
      
let node g() returns (y, z)
  do y = run f(z) and z = y done
    
let node main2() returns (o)
  local o1, o2, o3, z
  do  o1, o2 = run g() and o3 = (0 fby z) + 1 and z = o3
  and o = (o1 = o3) && (o2 = z) done
      
let node main1() returns ()
  local m1 default 0, m2, half, o
  do
    if half then do done
    else do m1 = 42 -> pre m1 + 1 done
  and
    if half then do m2 = 0 done
    else do m2 = 42 -> pre m2 + 1 done
  and
      half = true -> not (pre half)
  and
      o = m1 = m2
  and
      assert o
  done
 *)
	
