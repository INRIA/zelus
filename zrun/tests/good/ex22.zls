let node f1 x =
  let rec n = 0 -> pre n + 1 in
  [| x with n <- 3 |]

let node f x = foreach(4) do x done

let node main0 () =
  let x = f 4 in
  let y = f1 x in
  foreach(4) yi in y do yi done
      
let node f x =
  forward(4) do x + last x done
      
let node ff x = m2 where rec
    m2 = foreach(4) xi in x returns (m1 init 0)
          do
            m1 = foreach(4) xij in xi returns (m init last m1)
                 do m = last m + xij done
          done
   
let node g x =
  forward(4) xi in x do 
    let rec cpt = (0 fby cpt) + xi in
    cpt
  done

let node gg x =
  let rec o =
    (forward(4) xi in x do 
      let rec cpt = (0 fby cpt) + xi in
      cpt
     done) + (0 fby o) in
  o

let node main1 () = g [| 1; 2; 3; 4 |]

let node main11 () = gg [| 1; 2; 3; 4 |]

let node sum(xi, yi) = cpt where
  rec cpt = (0 fby cpt) + xi * yi

let node scalar (x, y) =
  forward(4) xi in x, yi in y do sum(xi, yi) done

let node main2 () =
  scalar (foreach(4) do 2 done, foreach(4) do 2 done)

let node plus1 x =
  foreach(4) xi in x do xi + 1 done

let node plus (x, y) =
  foreach(4) xi in x, yi in y do xi + yi done

let node plus11 x =
  foreach(4) xi in x do
    let rec cpt = xi fby cpt + 1 in cpt
  done

let node copy x =
  foreach(4) xi in x do
    let rec cpt = (0 fby cpt) + xi in
    cpt
  done
  
let node main3 () =
  plus (plus1 (f 0), plus1 (f 1))

let node main4 () =
  plus1 (copy (f 1))

let node main5() =
  plus11 (f 0)

let node main6 () =
  let x = f 0 in
  x.(0) default 42

let node scalar1 (x, y) =
  forward(4) xi in x, yi in y do sum(xi, yi) done
   
let node scalar2 (x, y) = o where
  rec o = forward(4) xi in x, yi in y returns (m init 0)
            do m = last m + xi * yi done

let node main7 () =
  scalar1 ([| 1; 2; 3; 4 |], [| 1; 1; 1; 1 |])

let node main8 () =
  scalar1 (foreach(4) do 1 done, foreach(4) do 2 done)

let node main9 () =
  scalar2 ([| 1; 2; 3; 4 |], [| 1; 1; 1; 1 |])

let node sum1 (x) = o where
  rec o = forward(2) xi in x returns (o init 0)
            do o = last o + xi done

let node main10 () = sum1 ([| 1; 2 |])
	  
(* produit de matrices *)
let node prod_matrix a b = r where rec
  r = forward(4) i in 0 .. 3, ai in a returns ([|ri|])
        do ri = forward(5) j in 0 .. 4 returns ([|rij|])
                   do rij = forward(6) k in 0 .. 5, bk in b returns (cpt init 0)
                              do cpt = last cpt + ai.(k) * bk.(j) done
                   done
        done
