let node two_states(set,r,i) returns (state)
 do
  state = i -> if set && not (pre state) then true
               else if r && pre(state) then false
               else pre(state)
 done

let node edge(x) returns (edge )
 do
  edge = x -> x && not (pre x)
 done

let node implies(a,b) returns (implies)
  do implies = if a then b else true done

let node after (a) returns (x)
  do x = false -> pre(a or x) done

let node always_since (c,a) returns (x)
  do
    x = if a then c
        else if run after(a) then c && pre(x)
        else true
  done

let node once_since (c,a) returns (x)
  do x = if a then c
	 else if run after(a) then c or pre(x)
	 else true
  done

let node always_from_to (c, a, b) returns (x)
 do
   x = run implies
     (run after(a), run always_since(c, a) or run once_since(b, a))
 done

let node once_from_to (c, a, b) returns (x)
  do
    x = run implies (after(a) && b, run once_since(c, a))
  done

let node alternating(a,b) returns (x)
  local a_forbiden, b_forbiden
  do a_forbiden = false -> if pre(a) && not a then true
                          else if pre(b) && not b then false	
			  else pre(a_forbiden)
  and b_forbiden = true -> if pre(b) && not b then true
                           else if pre(a) && not a then false	
		           else pre(b_forbiden)
  and x = not(a && a_forbiden) && not(b && b_forbiden)
  done

let node not_between_and (a,b,c) returns (x)
  do x = run implies(c, not (run once_since(a,b)))
  done

(* Example from the Lustre distribution *)
let node ums(on_A,on_B,on_C,ack_AB,ack_BC)
     returns (grant_access,grant_exit,
	      do_AB,do_BC)
local empty_section, only_on_B
  do  grant_access = empty_section && ack_AB
  and grant_exit = only_on_B && ack_BC
  and do_AB = not ack_AB && empty_section
  and do_BC = not ack_BC && only_on_B
  and empty_section = not(on_A or on_B or on_C)
  and only_on_B = on_B && not(on_A or on_C)
done

let node ums_verif(on_A,on_B,on_C, ack_AB,ack_BC)
     returns (property)
local
   grant_access,grant_exit,
   do_AB,do_BC,
   no_collision,exclusive_req,
   no_derail_AB,no_derail_BC,
   empty_section, only_on_B
do
   empty_section = not(on_A or on_B or on_C)
and
    only_on_B = on_B && not(on_A or on_C)
and
    (* ASSERTIONS *)
   assert not(ack_AB && ack_BC)
and
    assert true -> run always_from_to(ack_AB,ack_AB,do_BC)
and
    assert true -> run always_from_to(ack_BC,ack_BC,do_AB)
and
    assert empty_section -> true
and
    assert true -> run implies(run edge(not empty_section), pre grant_access)
and
    assert true -> run implies(run edge(on_C), pre grant_exit)
and
    assert true -> run implies(run edge(not on_A),on_B)
and
    assert true -> run implies(run edge(not on_B),
			  on_A or on_C)
and
   (* UMS CALL *)
   (grant_access,grant_exit,do_AB,do_BC) =
	run ums(on_A,on_B,on_C,ack_AB,ack_BC)
and
   (* PROPERTIES *)
   no_collision =
	run implies(grant_access,empty_section)
and
    exclusive_req =
	not(do_AB && do_BC)
and
    no_derail_AB =
	run always_from_to(ack_AB,
		       grant_access,
		       only_on_B)
and
    no_derail_BC =
	run always_from_to(ack_BC,
		       grant_exit,
		       empty_section)
and
    property =
	no_collision && exclusive_req &&
	no_derail_AB && no_derail_BC
done

let node main() returns (property)
  local
    on_A, on_B, on_C, ack_AB, ack_BC
  do
    on_A = true
  and
      on_B = true
  and
      on_C = true
  and
      ack_AB = true
  and
      ack_BC = true
  and
      property = run ums_verif(on_A, on_B, on_C, ack_AB, ack_BC)
  done
