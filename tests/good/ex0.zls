let node f1() returns (o init 42)
  o = last o + 1

let f () = (fun x y -> if x then 1 else 2) true 1

let main_2 () = (fun x f -> f(x))(3)(fun x -> x + 1)

let f = fun x -> 
  node y returns o 
    let rec nat = 0 -> pre nat + x in
    o = nat

let node h x = 0

let node g5() = 
  let f x = x + 1 in
  f (42)

let node hh () = 
  let rec c = true -> pre (not c) in
  (if c then (fun x -> x + 1) else (fun x -> x + 2)) 0

let node g4() = run (f 42) 0

let node g1() = 
  let static m = f 42 in
  run m 0

let node main111() returns (o)
  o = forward resume (10) returns (v) do
        v = 0 fby (v + 1)
      done

let node main_() returns (o init 42)
  o = forward(2) returns (v) do
        v = 0 -> last o + 1
      done

let node main__() returns (o init 42)
  o = last o + 1

let node main___() returns (o)
  local last_o do o = last_o + 1 and last_o = 42 fby o done

let node test() = main__() = main___()

let next(p)(x) = 
  forward(2) returns (o) do o = run p (x) done

let main__ () =
  next (node x -> 42 fby x) 2

let main___ () =
  let x = 0 in
  forward(2) returns (o init -1) do o = 42 fby x done

(* let node main_42 () returns (l)
  forward i in 0 to 10, l init 0 do
    forward j in 0 to 10, l init last l do
      l = last l + 1
    done
  done
 *)

  
let node main22() returns (x)
  do x = 0 -> pre x + 1
  done

let node ffff() returns (o)
  local y, c
  do  o = if c then y else 2
  and y = if c then 1 else o
  and c = true fby not c
  done

let node incr(x) returns (o)
    o = 0 fby x + 1

let node nat () =
  let rec o = incr o in o
    
let node fibo () returns (o)
  local po
  do po = 1 fby (po + o)
  and o = 1 fby po done

let node euler_forward(h, x0, xprime) returns (x)
  x = x0 -> pre(x +. h *. xprime)

let node euler_backward(h, x0, xprime) returns (x)
    x = x0 -> pre(x) +. h *. xprime

(* [ (x(n+1) - x(n)) / h = f x(n) *)
let node main45() returns (x)
  x = euler_forward(0.1, 1.0, 0.5 *. x)

let node or_gate(x,y) = if x then true else y
let node and_gate(x,y) = if x then y else false

let node ff() returns (o)
    o = or_gate(true, not o)

let node first() returns (o)
  emit o = 1

let node sum(x) returns (o)
  o = forward xi in x
        do let rec o = (0.0 fby o) +. xi in o done

let node sum(x) returns (s)
    s = (0 fby s) + x
    
let node sum(x) returns (o)
  o = forward xi in x do sum(xi) done

let node sum(x, y) = o where
  rec o = (0.0 fby o) +. x *. y

let node scalar(t1, t2) =
  forward (xi in t1, yi in t2) do
    sum(xi, yi)
  done

    
let node main42() =
  scalar([|1.0; 2.0; 3.0|] fby [|2.0; 3.0; 4.0|] ,
	 [|1.0; 2.0; 3.0 |])
      
let g11 = 42

let node from(x') = o where
  rec o = 1 -> pre(o + x')

let node main() =
  let rec o = from(o) in o
    
let node f12(x, y) returns (o)
  local z
  do o = x + y
  and z = x + 1
  done

let node g12(x, y) returns (o)
  o = let rec z = x + 1 and o = x + y in o

let node main1() returns (m)
  m = f12(1, 2)

let node main2() returns (m)
    m = g12(1, 2)
    
  
let node f13(x) = 0 fby x + 1

let node g13() = 1, 2

let node h13() returns (y)
  y = f13(y)

let node main3() returns (o)
  do o = h13 () done
      
let node g14() returns (y, z)
  do y = run f13(z) and z = y done
    
let node main4() returns (o)
  local o1, o2, o3, z
  do  o1, o2 = run g14() and o3 = (0 fby z) + 1 and z = o3
  and o = (o1 = o3) && (o2 = z) done

let node main5() returns ()
  local m1 default 0, m2, half, o
  do
    if half then do done
    else do m1 = 42 -> pre m1 + 1 done
  and
    if half then do m2 = 0 done
    else do m2 = 42 -> pre m2 + 1 done
  and
      half = true -> not (pre half)
  and
      o = m1 = m2
  and
      assert o
  done
 
