(* recursive functions defined at top level *)
let rec f1<<n>>(x) returns o 
  if n=0 then o = x
  else o = g1<<n-1>>(x+1)
and g1<<n>>(x) = f1<<n-1>>(x)

let rec f2<<n>>(x) =
  match n with
  | 0 -> x
  | _ -> f2<<n-1>>(x+1)
  
let f4 () =
    let rec ff<<n>>(x) = 
      match n with | 0 -> x | n -> gg<<n-1>>(x+1)
    and gg<<n>>(x) = ff<<n-1>>(x) in
    ff<<10>>(0)

let node main1 () = f1<<10>>(0)
let node main2 () = f2<<10>>(0)
let node main5 () = f4 ()


