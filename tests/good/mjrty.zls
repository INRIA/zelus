(* Boyer and Moore Majority Algorithm *)
(* Find in linear time (two passes) one vote that appears more than *)
(* half of the time; if there is some *)

(* https://en.wikipedia.org/wiki/Boyer–Moore_majority_vote_algorithm
Initialize an element m and a counter c with c = 0
For each element x of the input sequence:
If c = 0, then assign m = x and c = 1
else if m = x, then assign c = c + 1
else assign c = c − 1
Return m
*)

let node vote(x) returns (m init 0)
  local c init 0 in
  if last c = 0 then do m = x and c = 1 done
  else if m = x then
    do c = last c + 1 done
  else
    do c = last c - 1 done

let count_votes(n)(x, a) returns (n)
  n = forward(n)(ai in a) returns (s init 0) do
        s = if ai = x then last s + 1 else last s
      done

let count_votes (x, a) returns (n)
  n = forward (ai in a) returns (s init 0) do
           s = if ai = x then last s + 1 else last s
      done

let main(nb_votes, votes) returns (candidate, has_majority)
  do
    candidate = forward(vi in votes) returns (c) do c = vote(vi) done
  and
    has_majority = 2 * (count_votes(candidate, votes)) > nb_votes
  done

(* or with an automaton that do not need an initial value for c *)
(* This code is not interesting in practice *)

let node vote(x) returns (m)
  local c in
  automaton
  | NoCandidate -> do c = 1 and m = x continue Candidate
  | Candidate ->
      do c = if last m = x then last c + 1 else last c - 1
      until (c = 0) continue NoCandidate
  end
  
let nb_votes = 10

let node main () returns (o)
  let votes = [|3;2;3;1;3;2;3;1;3;3|] in
  do o = main(nb_votes, votes) done

